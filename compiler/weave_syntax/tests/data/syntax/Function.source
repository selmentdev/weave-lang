// empty statement

#[Inline, NoInline,] function Empty1(,a:A, b:B, #[foo] , {})

// Argument attributes:
#[Foo, Deprecated("Reason")]
function Bar(
    #[Unused] a: Int32,
    #[Unused] b: Float32);

function Emtpy() {;}
extern function Declared() -> void;
inline function Expression() => 42;
export function Body() -> void {
    return;
}

function Select2(a: bool, b: float, c: float, d: float, e: float) -> float {
    return a ? b + c * d  d + e / c;
}

function Select(a: bool, b: float, c: float) -> float {
    return a ? b : c;
}

function Select2(a: bool, b: float, c: float, d: float, e: float) -> float {
    return a ? b + c * d : d + e / c;
}

function foo(x: int, y: int, z: int, c: int, out w: int) -> void {
    w = x = y = z + c;
}

function before(y: bool) -> void {
    if /*let Some(y)*/ = y {
        Console.WriteLine("Got something");
    } else {
        Console.WriteLine("Got nothing");
    }
}

// pacz pan, syntax walker :^)

public private tailcall unsafe export transient trusted function mul_high(
    in ref out move left: u64,
    in right: u64,
    out lower: u64) -> u64
{
    let ll = left & 0xFFFFFFFFu64;
    let lu = left >> 32u64;
    let rl = right & 0xFFFFFFFFu64;
    let ru = right >> 32u64;
    let ll_rl = ll * rl;
    let ll_ru = ll * ru;
    let lu_rl = lu * rl;
    let lu_ru = lu * ru;
    let m = (ll_rl >> 32u64) + ll_ru + (lu_rl & 0xFFFFFFFFu64);
    lower = (ll_rl & 0xFFFFFFFFu64) | (m << 32u64);
    return (m >> 32u64) + (lu_rl >> 32u64) + lu_ru;
}

function after() -> void {}

function Testing(a: int32, b: int32) -> int32 {
    if a < b {
        return a;
    } else {
        return b;
    }
}

function EndOfFileDuringStatement() { =42: a=5;}

struct Foo {}

const x = 42

namespace namespace }

namespace X {
    namespace Y {
        namespace Z {
            function W() {:z= a b c 4
            R
            U







            S
            T
            namespace; // this is commentos
