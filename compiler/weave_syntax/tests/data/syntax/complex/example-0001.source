public extend ExampleType
{
    public function Bar(self: &var Self, other: &var Self) -> Self
    {
        return self + other;
    }

    public unsafe function Baz(left: &let *let Self, right: &let *let Self) -> *let Self
    {
        return (left < right) ? left : right;
    }
}

public unsafe explicit struct RawObjectPointer
{
    public var VTable   : *let void;
    public var Instance : *var void;
}

public unsafe explicit struct RawStringPointer
{
    public var Data     : *var char;
    public var Length   : UIntPtr;
}

public unsafe explicit struct RawArray![type T]
{
    public var Data     : *var T;
    public var Count    : UIntPtr;
}

public unsafe explicit struct RawSlice![type T]
{
    public var Data     : *var T;
    public var Count    : UIntPtr;
}

public extend ConvertTo![type T]
{
    public function From![type U](value: &let U) -> T
    {
        return value as T;
    }
}
