using weave;
using weave::fs;

namespace weave
{
    public var g1 = g2.g3.g4(g5, move g6, out result)[lecimy, w, kulki]++;

    public var g1 = *(((((g2).g3).g4)(g5, move g6, out result))[lecimy, w, kulki]++);

    public var precedence = g1[((g1, g2), g3), g4];

    public let p0 = gloo++;
    public let p1 = ++gloo;
    public let p2 = ++gloo++;
    public let p3 = (++gloo)++;
    public let p4 = ++(gloo++);

    //public let invalid.name = 21;

    public let valid = name.foo.bar;

    public let magic = 21 + 37 * 4;
    public let magic = 21 + (37 * 4);
    public let magic = (21 + 37) * 4;

    public let papaj : f32 = 2 + 1 * 3 - 7;

    public let Version : weave::core::u32 = uninitialized;
    public var Global : i32 = uninitialized;

    public function Main()
    {
    }

    public struct Vector4
    {
        public var X: f32;
        public var Y: f32;
        public var Z: f32;
        public var W: f32;

        public function From(
            x: in f32,
            y: in f32,
            z: in f32,
            w: in f32
        ) -> Vector4;
    }

    public concept Addable
    {
        public function Add() -> Self { }
    }

    public extend Vector4
    {
        public function New() -> Vector4 { }
    }
}

namespace weave::compiler
{
    using weave::extensions;

    public struct Compiler
    {
    };
}

namespace core
{
    public struct Vector![type T, const Capacity: usize]
    {
        private var _data: [T] = uninitialized;

        private var _length: usize = 0;

        public var length: usize
        {
            get
            {
                return self._length;
            }
        }

        public function push(ref self, value: move T) -> void
            // before: (self._length < Capacity)
        {
            self._data[self._length] = value;
            self._length += 1;
        }
    }
}

namespace std::numerics 
{
    public struct Vector2![type T] {
        public var x: T = uninitialized;
        public var y: T = uninitialized;

        public function add(self, other: in Self) -> Self
            // FIXME: Missing `(` and `)` will make parser to consume
            // everything until the end of the file as unexpected tokens.
            where (T : Addable)
        {
            return Self(
                x: self.x + other.x,
                y: self.y + other.y,
            );
        }
    }
}

namespace std::numerics
{
    public function CheckedAdd![type T](a: T, b: T) -> Self
    {
        if a > 0 && b > 0 && a > T::MaxValue - b {
            return None;
        }

        if a < 0 && b < 0 && a < T::MinValue - b {
            return None;
        }

        return Some(a + b);
    }
}
