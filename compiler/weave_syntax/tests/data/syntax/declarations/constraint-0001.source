// function declaration
public function MoveReference       (move   x:  Int32)  ->  move    Int32   { return move x;    }
public function OutputReference     (out    x:  Int32)                      { x = 42;           }
public function MutableReference    (ref    x:  Int32)  ->  ref     Int32   { return ref x;     }
public function InputReference      (in     x:  Int32)  ->  in      Int32   { return x;         }

// with named return value - using return keyword
public function MoveReference       (move   x:  Int32)  ->  move    result: Int32   {   return  move    x;      }
public function OutputReference     (out    x:  Int32)                              {                   x = 42; }
public function MutableReference    (ref    x:  Int32)  ->  ref     result: Int32   {   return  ref     x;      }
public function InputReference      (in     x:  Int32)  ->  in      result: Int32   {   return          x;      }

// with named return with assignment
// - implicit return with fall-off
// - validate if all controll paths assign value instead of looking for return keyword
public function MoveReference       (move   x:  Int32)  ->  move    result: Int32   {   result = move   x;      /* return; ? */ }
public function OutputReference     (out    x:  Int32)                              {                   x = 42; /* return; ? */ }
public function MutableReference    (ref    x:  Int32)  ->  ref     result: Int32   {   result = ref    x;      /* return; ? */ }
public function InputReference      (in     x:  Int32)  ->  in      result: Int32   {   result =        x;      /* return; ? */ }

public function F(
    in      x: X,
    ref     y: Y,
    out     z: Z,
    move    w: W
) -> ref Y
{
    var ww = move w;
    z = 0;
    y += 42;
    return ref y;
}

{
    var x: X;
    var y: Y;
    var z: Z;
    var w: W;

    F(
        in x,
        ref y,
        out z,
        move w);
}


public function Foo![type T, type U, type V](
    in  t: T,
    out u: U,
    ref v: v
) -> Int32
    where (T: Concept1, Concept2, Concept3)
    where (U: Concept4, Concept5)
    where (V: Concept6)
{
    contracts {
        r#requires    (   t > 0       )
        r#requires    (   t < 100     )
        r#ensures     (   u > 21      )
        r#ensures     (   v < 37      )
        r#ensures     (     r > 0           )
        r#ensures     (                   v == old(v)     )
        r#invariant   (                   v >= 10         )
    };

    assert(t > 0);
}



call(x, _x);

public function Foo![type T, type U, type V](
    in  t: T,
    out u: U,
    ref v: v
) -> result: Int32
    where (T: Concept1, Concept2, Concept3  )
    where (U: Concept4, Concept5            )   // allow trailing comma?
    where (V: Concept6                      )

    requires                (   t > 0       )
    requires                (   t < 100     )

    ensures                 (   u > 21      )
    ensures                 (   v < 37      )
    ensures                 (   result > 0  )
    ensures                 (   v == old(v) )
    invariant               (   v >= 10     )
{
    assert(t > 0);
}

public function Quaz![type T, type U, type V](
    in t: T,
    ref u: U,
    out v: V
) -> (T, U, [V])
    where (T: Concept1, Concept2, Concept3)
    where (U: Concept4, Concept5)
    where (V: Concept6)
    /*#[config("DEBUG")]   */   requires    ( t > 0                           )
    /*#[config("CHECKED")] */   ensures     ( u > 21 && v < 37                )
    /*#[config("RELEASE")] */   ensures     ( rt > 0 && ru > 0 && rv < old(v) )
    /*#[config("DEBUG")]   */   invariant   ( v >= 10                         )
;

{
    assert(t > 0);
    assert(t < 100);
}

#[Requires(t > 0)]
#[Ensures(return r: u > 21, v < 37, r > 0, v == old(v))]
#[Invariant(v >= 10)]
public function Quaz![type T, type U, type V](
    in t: T,
    ref u: U,
    out v: V
) -> (T, U, [V])
    where (T: Concept1, Concept2, Concept3)
    where (U: Concept4, Concept5)
    where (V: Concept6)
{
    // function body
}

/*
assert-expression
    : 'assert' '(' expression (',' string-literal)? ')'
    | 'assert' '(' (identifier ':')? expression (',' string-literal)? ')'
    ;

contract-clause
    : 'expects' contract
    | 'ensures' contract
    ;

contract
    : contract-capture? contract-condition
    ;

contract-condition
    : '(' return-name? conditional-expression ')'
    ;

return-name
    : identifier ':'
    ;

contract-capture
    : '[' capture-list ']'
    ;

*/


public function Update![type T, const N: Int32](
    in a: T,
    in b: T,
    out c: T,
    ref d: T
) -> r: T
    where (T: Addable, Multiplicable)
    requires(a != c)
    requires(b >= 0)
    ensures(c > 10)
    ensures(r < 100)
    ensures(r > 10)
    invariant(25 <= d)
    invariant(d <= 75)
{
    assert(a >= 42);
    assert(b < 2137);
    assert((a <= d) && (d <= c));

    // code

    return c;
}

// variant 2 - full assert blocks with explicit body
private extern function sqrtf(x: Float32) -> r: Float32
    requires (x >= 0)
    ensures (r * r == x)
;// trailing semicolon? is it necessary?

public function SquareRoot![type T](
    in a: T
) -> T
where (T: FloatingPoint)
requires(
    a >= 0
)
ensures
(
    r * r == a
)
{
    if (a is Float32) {
        return sqrtf(a);
    } else if (a is Float64) {
        return sqrt(a);
    } else {
        bugcheck("Unsupported type");
    }
}
