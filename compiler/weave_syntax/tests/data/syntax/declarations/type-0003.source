namespace Pointers
{
    namespace Valid
    {
        public type T_P_cmra = *                              Int;
        public type T_P_Cmra = *const                         Int;
        public type T_P_cMra = *      mutable                 Int;
        public type T_P_CMra = *const mutable                 Int;
        public type T_P_cmRa = *              restrict        Int;
        public type T_P_CmRa = *const         restrict        Int;
        public type T_P_cMRa = *      mutable restrict        Int;
        public type T_P_CMRa = *const mutable restrict        Int;
        public type T_P_cmrA = *                       atomic Int;
        public type T_P_CmrA = *const                  atomic Int;
        public type T_P_cMrA = *      mutable          atomic Int;
        public type T_P_CMrA = *const mutable          atomic Int;
        public type T_P_cmRA = *              restrict atomic Int;
        public type T_P_CmRA = *const         restrict atomic Int;
        public type T_P_cMRA = *      mutable restrict atomic Int;
        public type T_P_CMRA = *const mutable restrict atomic Int;
    }

    namespace Mixed
    {
        public type T_P_CMRA = * const       mutable     restrict    atomic      Int;
        public type T_P_MRAC = * mutable     restrict    atomic      const       Int;
        public type T_P_RACM = * restrict    atomic      const       mutable     Int;
        public type T_P_ACMR = * atomic      const       mutable     restrict    Int;
    }

    namespace Duplicated
    {
        public type T_P_CMRC = *const    mutable restrict const   Int;
        public type T_P_CMRM = *const    mutable restrict mutable Int;
        public type T_P_RMRA = *restrict mutable restrict atomic  Int;
        public type T_P_AMRA = *atomic   mutable restrict atomic  Int;
    }

    namespace MultiLevel
    {
        public type T_P_CMRA = *const       *mutable    *restrict   *atomic     Int;
        public type T_P_MRAC = *mutable     *restrict   *atomic     *const      Int;
        public type T_P_RACM = *restrict    *atomic     *const      *mutable    Int;
        public type T_P_ACMR = *atomic      *const      *mutable    *restrict   Int;
    }
}

namespace References
{
    namespace Valid
    {
        public type T_P_cmra = &                              Int;
        public type T_P_Cmra = &const                         Int;
        public type T_P_cMra = &      mutable                 Int;
        public type T_P_CMra = &const mutable                 Int;
        public type T_P_cmRa = &              restrict        Int;
        public type T_P_CmRa = &const         restrict        Int;
        public type T_P_cMRa = &      mutable restrict        Int;
        public type T_P_CMRa = &const mutable restrict        Int;
        public type T_P_cmrA = &                       atomic Int;
        public type T_P_CmrA = &const                  atomic Int;
        public type T_P_cMrA = &      mutable          atomic Int;
        public type T_P_CMrA = &const mutable          atomic Int;
        public type T_P_cmRA = &              restrict atomic Int;
        public type T_P_CmRA = &const         restrict atomic Int;
        public type T_P_cMRA = &      mutable restrict atomic Int;
        public type T_P_CMRA = &const mutable restrict atomic Int;
    }

    namespace Mixed
    {
        public type T_P_CMRA = & const       mutable     restrict    atomic      Int;
        public type T_P_MRAC = & mutable     restrict    atomic      const       Int;
        public type T_P_RACM = & restrict    atomic      const       mutable     Int;
        public type T_P_ACMR = & atomic      const       mutable     restrict    Int;
    }

    namespace Duplicated
    {
        public type T_P_CMRC = &const    mutable restrict const   Int;
        public type T_P_CMRM = &const    mutable restrict mutable Int;
        public type T_P_RMRA = &restrict mutable restrict atomic  Int;
        public type T_P_AMRA = &atomic   mutable restrict atomic  Int;
    }

    namespace MultiLevel
    {
        public type T_P_CMRA = &const       &mutable    &restrict   &atomic     Int;
        public type T_P_MRAC = &mutable     &restrict   &atomic     &const      Int;
        public type T_P_RACM = &restrict    &atomic     &const      &mutable    Int;
        public type T_P_ACMR = &atomic      &const      &mutable    &restrict   Int;
    }
}

namespace Mixed
{
    public type T1 = &mutable *const Int;
    public type T2 = &mutable restrict *mutable atomic Int;
}
