SourceFileSyntax
 SyntaxList
  CodeBlockItemSyntax
   LabeledStatementSyntax
    NameColonSyntax
     IdentifierSyntax
      IdentifierToken <10:19> [1:0:1:9] 'somewhere'
     ColonToken <19:20> [1:9:1:10] ':'
    WhileStatementSyntax
     SyntaxList
      AttributeListSyntax
       HashOpenBracketToken <0:2> [0:0:0:2] '#['
       SyntaxList
        AttributeSyntax
         PathSyntax
          SyntaxList
           PathSegmentSyntax
            IdentifierSyntax
             IdentifierToken <2:8> [0:2:0:8] 'unroll'
       CloseBracketToken <8:9> [0:8:0:9] ']'
     WhileKeyword <21:26> [1:11:1:16] 'while'
     OpenParenToken <27:28> [1:17:1:18] '('
     BinaryExpressionSyntax
      PathExpressionSyntax
       PathSyntax
        SyntaxList
         PathSegmentSyntax
          IdentifierSyntax
           IdentifierToken <28:29> [1:18:1:19] 'x'
      ExclamationEqualsToken <30:32> [1:20:1:22] '!='
      LiteralExpressionSyntax
       IntegerLiteralToken <33:34> [1:23:1:24] '0'
     CloseParenToken <34:35> [1:24:1:25] ')'
     CodeBlockSyntax
      OpenBraceToken <36:37> [2:0:2:1] '{'
      SyntaxList
       CodeBlockItemSyntax
        WhileStatementSyntax
         WhileKeyword <42:47> [3:4:3:9] 'while'
         OpenParenToken <48:49> [3:10:3:11] '('
         BinaryExpressionSyntax
          PathExpressionSyntax
           PathSyntax
            SyntaxList
             PathSegmentSyntax
              IdentifierSyntax
               IdentifierToken <49:50> [3:11:3:12] 'z'
          ExclamationEqualsToken <51:53> [3:13:3:15] '!='
          LiteralExpressionSyntax
           IntegerLiteralToken <54:55> [3:16:3:17] '0'
         CloseParenToken <55:56> [3:17:3:18] ')'
         CodeBlockSyntax
          OpenBraceToken <61:62> [4:4:4:5] '{'
          SyntaxList
           CodeBlockItemSyntax
            ExpressionStatementSyntax
             IfExpressionSyntax
              IfKeyword <71:73> [5:8:5:10] 'if'
              OpenParenToken <74:75> [5:11:5:12] '('
              BinaryExpressionSyntax
               TupleExpressionSyntax
                OpenParenToken <75:76> [5:12:5:13] '('
                SyntaxList
                 LabeledExpressionSyntax
                  BinaryExpressionSyntax
                   PathExpressionSyntax
                    PathSyntax
                     SyntaxList
                      PathSegmentSyntax
                       IdentifierSyntax
                        IdentifierToken <76:77> [5:13:5:14] 'x'
                   PercentToken <78:79> [5:15:5:16] '%'
                   LiteralExpressionSyntax
                    IntegerLiteralToken <80:81> [5:17:5:18] '4'
                CloseParenToken <81:82> [5:18:5:19] ')'
               EqualsEqualsToken <83:85> [5:20:5:22] '=='
               LiteralExpressionSyntax
                IntegerLiteralToken <86:87> [5:23:5:24] '0'
              CloseParenToken <87:88> [5:24:5:25] ')'
              CodeBlockSyntax
               OpenBraceToken <97:98> [6:8:6:9] '{'
               SyntaxList
                CodeBlockItemSyntax
                 BreakStatementSyntax
                  BreakKeyword <111:116> [7:12:7:17] 'break'
                 SemicolonToken <116:117> [7:17:7:18] ';'
               CloseBraceToken <126:127> [8:8:8:9] '}'
              ElseClauseSyntax
               ElseKeyword <136:140> [9:8:9:12] 'else'
               IfExpressionSyntax
                IfKeyword <141:143> [9:13:9:15] 'if'
                OpenParenToken <144:145> [9:16:9:17] '('
                BinaryExpressionSyntax
                 BinaryExpressionSyntax
                  PathExpressionSyntax
                   PathSyntax
                    SyntaxList
                     PathSegmentSyntax
                      IdentifierSyntax
                       IdentifierToken <145:146> [9:17:9:18] 'x'
                  PercentToken <147:148> [9:19:9:20] '%'
                  LiteralExpressionSyntax
                   IntegerLiteralToken <149:150> [9:21:9:22] '3'
                 EqualsEqualsToken <151:153> [9:23:9:25] '=='
                 LiteralExpressionSyntax
                  IntegerLiteralToken <154:155> [9:26:9:27] '1'
                CloseParenToken <155:156> [9:27:9:28] ')'
                CodeBlockSyntax
                 OpenBraceToken <165:166> [10:8:10:9] '{'
                 SyntaxList
                  CodeBlockItemSyntax
                   ContinueStatementSyntax
                    ContinueKeyword <179:187> [11:12:11:20] 'continue'
                   SemicolonToken <187:188> [11:20:11:21] ';'
                 CloseBraceToken <197:198> [12:8:12:9] '}'
                ElseClauseSyntax
                 ElseKeyword <207:211> [13:8:13:12] 'else'
                 CodeBlockSyntax
                  OpenBraceToken <220:221> [14:8:14:9] '{'
                  SyntaxList
                   CodeBlockItemSyntax
                    GotoStatementSyntax
                     GotoKeyword <234:238> [15:12:15:16] 'goto'
                     IdentifierToken <239:248> [15:17:15:26] 'somewhere'
                    SemicolonToken <248:249> [15:26:15:27] ';'
                  CloseBraceToken <258:259> [16:8:16:9] '}'
          CloseBraceToken <264:265> [17:4:17:5] '}'
      CloseBraceToken <266:267> [18:0:18:1] '}'
  CodeBlockItemSyntax
   ForStatementSyntax
    ForKeyword <269:272> [20:0:20:3] 'for'
    OpenParenToken <273:274> [20:4:20:5] '('
    SemicolonToken <274:275> [20:5:20:6] ';'
    SemicolonToken <275:276> [20:6:20:7] ';'
    CloseParenToken <276:277> [20:7:20:8] ')'
    CodeBlockSyntax
     OpenBraceToken <278:279> [21:0:21:1] '{'
     SyntaxList
      CodeBlockItemSyntax
       BreakStatementSyntax
        BreakKeyword <284:289> [22:4:22:9] 'break'
       SemicolonToken <289:290> [22:9:22:10] ';'
     CloseBraceToken <291:292> [23:0:23:1] '}'
  CodeBlockItemSyntax
   ForeachStatementSyntax
    ForeachKeyword <294:301> [25:0:25:7] 'foreach'
    OpenParenToken <302:303> [25:8:25:9] '('
    VariableDeclarationSyntax
     VarKeyword <303:306> [25:9:25:12] 'var'
     IdentifierPatternSyntax
      IdentifierSyntax
       IdentifierToken <307:311> [25:13:25:17] 'item'
    InKeyword <312:314> [25:18:25:20] 'in'
    PathExpressionSyntax
     PathSyntax
      SyntaxList
       PathSegmentSyntax
        IdentifierSyntax
         IdentifierToken <315:325> [25:21:25:31] 'collection'
    CloseParenToken <325:326> [25:31:25:32] ')'
    CodeBlockSyntax
     OpenBraceToken <327:328> [26:0:26:1] '{'
     SyntaxList
      CodeBlockItemSyntax
       BreakStatementSyntax
        BreakKeyword <333:338> [27:4:27:9] 'break'
       SemicolonToken <338:339> [27:9:27:10] ';'
     CloseBraceToken <340:341> [28:0:28:1] '}'
  CodeBlockItemSyntax
   ForeachStatementSyntax
    ForeachKeyword <343:350> [30:0:30:7] 'foreach'
    OpenParenToken <351:352> [30:8:30:9] '('
    VariableDeclarationSyntax
     LetKeyword <352:353> [30:9:30:10] missing ''
     IdentifierPatternSyntax
      IdentifierSyntax
       IdentifierToken <352:353> [30:9:30:10] missing ''
    InKeyword <352:353> [30:9:30:10] missing ''
    PathExpressionSyntax
     PathSyntax
      SyntaxList
       PathSegmentSyntax
        IdentifierSyntax
         IdentifierToken <352:353> [30:9:30:10] missing ''
    UnexpectedNodesSyntax
     SyntaxList
      SemicolonToken <352:353> [30:9:30:10] ';'
    CloseParenToken <353:354> [30:10:30:11] ')'
    CodeBlockSyntax
     OpenBraceToken <355:356> [31:0:31:1] '{'
     SyntaxList
      CodeBlockItemSyntax
       BreakStatementSyntax
        BreakKeyword <361:366> [32:4:32:9] 'break'
       SemicolonToken <366:367> [32:9:32:10] ';'
     CloseBraceToken <368:369> [33:0:33:1] '}'
  CodeBlockItemSyntax
   ForStatementSyntax
    ForKeyword <371:374> [35:0:35:3] 'for'
    OpenParenToken <375:376> [35:4:35:5] '('
    SemicolonToken <376:377> [35:5:35:6] ';'
    SemicolonToken <377:378> [35:6:35:7] missing ''
    CloseParenToken <377:378> [35:6:35:7] ')'
    CodeBlockSyntax
     OpenBraceToken <379:380> [36:0:36:1] '{'
     SyntaxList
      CodeBlockItemSyntax
       BreakStatementSyntax
        BreakKeyword <385:390> [37:4:37:9] 'break'
       SemicolonToken <390:391> [37:9:37:10] ';'
     CloseBraceToken <392:393> [38:0:38:1] '}'
 EndOfFileToken <394:394> [39:0:39:0] ''
