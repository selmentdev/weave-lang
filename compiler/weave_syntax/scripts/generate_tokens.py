import os

generic = {
    'Error':      ['[token::error]'],
    'EndOfFile':  ['[token::end_of_file]'],
    'Identifier': ['[token::identifier]'],
}

punctuation = {
    'AmpersandAmpersandToken':            ['&&'],
    'AmpersandEqualsToken':               ['&='],
    'AmpersandToken':                     ['&'],
    'AsteriskEqualsToken':                ['*='],
    'AsteriskToken':                      ['*'],
    'AtToken':                            ['@'],
    'BackslashToken':                     ['\\'],
    'BarBarToken':                        ['||'],
    'BarEqualsToken':                     ['|='],
    'BarToken':                           ['|'],
    'CaretEqualsToken':                   ['^='],
    'CaretToken':                         ['^'],
    'ColonColonToken':                    ['::'],
    'ColonToken':                         [':'],
    'CommaToken':                         [','],
    'DollarToken':                        ['$'],
    'DotDotDotToken':                     ['...'],
    'DotDotToken':                        ['..'],
    'DotToken':                           ['.'],
    'EqualsEqualsToken':                  ['=='],
    'EqualsGreaterThanToken':             ['=>'],
    'EqualsToken':                        ['='],
    'ExclamationEqualsToken':             ['!='],
    'ExclamationToken':                   ['!'],
    'GreaterGreaterGreaterToken':         ['>>>'],
    'GreaterThanEqualsToken':             ['>='],
    'GreaterThanGreaterThanEqualsToken':  ['>>='],
    'GreaterThanGreaterThanToken':        ['>>'],
    'GreaterThanToken':                   ['>'],
    'HashToken':                          ['#'],
    'LessLessLessToken':                  ['<<<'],
    'LessThanEqualsToken':                ['<='],
    'LessThanLessThanEqualsToken':        ['<<='],
    'LessThanLessThanToken':              ['<<'],
    'LessThanToken':                      ['<'],
    'MinusEqualsToken':                   ['-='],
    'MinusGreaterThanToken':              ['->'],
    'MinusMinusToken':                    ['--'],
    'MinusToken':                         ['-'],
    'PercentEqualsToken':                 ['%='],
    'PercentToken':                       ['%'],
    'PlusEqualsToken':                    ['+='],
    'PlusPlusToken':                      ['++'],
    'PlusToken':                          ['+'],
    'QuestionQuestionToken':              ['??'],
    'QuestionToken':                      ['?'],
    'SemicolonToken':                     [';'],
    'SlashEqualsToken':                   ['/='],
    'SlashToken':                         ['/'],
    'TildeToken':                         ['~'],
}

all = {
    'WEAVE_TOKEN': [generic],
    'WEAVE_TOKEN_PUNCTUATION': [punctuation],
}

def find_max_len(tokens):
    return max(len(name) for name in tokens)

def write_tokens(f, macro, tokens):
    align = find_max_len(tokens)
    for name, value in tokens.items():
        f.write(f'{macro}({name: >{align}}, "{", ".join(value)}")\n')
    f.write('\n')

def main():
    with open(os.path.join(os.path.dirname(__file__), '..', 'tokens.txt'), 'w') as f:
        f.write('// This file is generated by generate_tokens.py\n')
        for macro, group in all.items():
            for tokens in group:
                write_tokens(f, macro, tokens)


if __name__ == '__main__':
    main()
