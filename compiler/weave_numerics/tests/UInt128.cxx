#include "weave/platform/Compiler.hxx"

WEAVE_EXTERNAL_HEADERS_BEGIN

#include <catch_amalgamated.hpp>
#include <fmt/format.h>

WEAVE_EXTERNAL_HEADERS_END

#include "weave/numerics/UInt128.hxx"

namespace Catch
{
    template <>
    struct StringMaker<weave::numerics::UInt128>
    {
        static std::string convert(weave::numerics::UInt128 const& value)
        {
            return fmt::format("0x{:016x}, 0x{:016x}", value.GetUpper(), value.GetLower());
        }
    };
}

TEST_CASE("Numerics - Unchecked UInt128")
{
    using namespace weave::numerics;

    SECTION("Addition")
    {
        CHECK(UInt128(0, 0) + UInt128(0, 0) == UInt128(0, 0));
        CHECK(UInt128(0, 0) + UInt128(0, 1) == UInt128(0, 1));
        CHECK(UInt128(0, 1) + UInt128(0, 0) == UInt128(0, 1));
        CHECK(UInt128(0, 1) + UInt128(0, 1) == UInt128(0, 2));

        CHECK(UInt128(0, 0) + UInt128(0, 5) == UInt128(0, 5));
        CHECK(UInt128(0, 5) + UInt128(0, 0) == UInt128(0, 5));
        CHECK(UInt128(0, 5) + UInt128(0, 5) == UInt128(0, 10));

        CHECK(UInt128(0, 0) + UInt128(0, 0xFFFFFFFFFFFFFFFF) == UInt128(0, 0xFFFFFFFFFFFFFFFF));
        CHECK(UInt128(0, 0xFFFFFFFFFFFFFFFF) + UInt128(0, 0) == UInt128(0, 0xFFFFFFFFFFFFFFFF));
        CHECK(UInt128(0, 0xFFFFFFFFFFFFFFFF) + UInt128(0, 0xFFFFFFFFFFFFFFFF) == UInt128(1, 0xfffffffffffffffe));
    }
}

void CheckMultiplyHigh(weave::numerics::UInt128 lower, weave::numerics::UInt128 upper, weave::numerics::UInt128 left, weave::numerics::UInt128 right)
{
    using namespace weave::numerics;

    UInt128 resultLower;
    UInt128 resultUpper = UInt128::MultiplyHigh(left, right, resultLower);

    CAPTURE(resultLower.GetLower());
    CAPTURE(resultLower.GetUpper());
    CAPTURE(resultUpper.GetLower());
    CAPTURE(resultUpper.GetUpper());

    CHECK(resultLower == lower);
    CHECK(resultUpper == upper);
}

TEST_CASE("Numerics - MultiplyHigh")
{
    using namespace weave::numerics;

    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000001, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x7FFF000080000001, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000001, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x7FFF000080000001, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000001, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x7FFF000080000001, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0xFFFFFFFFFFFFFFFF, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000001, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x7FFF000080000001, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000001), UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0x0000000000000001, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x7fff000080000001), UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0x7FFF000080000001, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0xffffffffffffffff), UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000001), UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0x0000000000000001, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0x0000000000000000, 0x7fff000080000001), UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0x7FFF000080000001, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0x0000000000000000, 0xffffffffffffffff), UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x7fff000080000001, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0x0000000000000000, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x7fff000080000001, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000001), UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0x0000000000000001, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x7fff000080000001, 0x0000000000000000), UInt128(0x0000000000000000, 0x7fff000080000001), UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0x7FFF000080000001, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x7fff000080000001, 0x0000000000000000), UInt128(0x0000000000000000, 0xffffffffffffffff), UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0xFFFFFFFFFFFFFFFF, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0xffffffffffffffff, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0x0000000000000000, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0xffffffffffffffff, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000001), UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0x0000000000000001, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0xffffffffffffffff, 0x0000000000000000), UInt128(0x0000000000000000, 0x7fff000080000001), UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0x7FFF000080000001, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0xffffffffffffffff, 0x0000000000000000), UInt128(0x0000000000000000, 0xffffffffffffffff), UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x7FFF000080000001, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x7fff000080000001), UInt128(0x7FFF000080000001, 0x0000000000000000), UInt128(0x0000000000000001, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x3fff00017fff0001, 0x3ffe000100000001), UInt128(0x7FFF000080000001, 0x0000000000000000), UInt128(0x7FFF000080000001, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x7fff000080000000, 0x8000ffff7fffffff), UInt128(0x7FFF000080000001, 0x0000000000000000), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x7fff000080000001, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x7FFF000080000001, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x7fff000080000001, 0x0000000000000000), UInt128(0x0000000000000000, 0x7fff000080000001), UInt128(0x7FFF000080000001, 0x0000000000000000), UInt128(0x0000000000000001, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x7fff000080000001, 0x0000000000000000), UInt128(0x3fff00017fff0001, 0x3ffe000100000001), UInt128(0x7FFF000080000001, 0x0000000000000000), UInt128(0x7FFF000080000001, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x7fff000080000001, 0x0000000000000000), UInt128(0x7fff000080000000, 0x8000ffff7fffffff), UInt128(0x7FFF000080000001, 0x0000000000000000), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x3ffe000100000001, 0x0000000000000000), UInt128(0x0000000000000000, 0x3fff00017fff0001), UInt128(0x7FFF000080000001, 0x0000000000000000), UInt128(0x0000000000000000, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x3ffe000100000001, 0x0000000000000000), UInt128(0x0000000000000000, 0xbffe0001ffff0002), UInt128(0x7FFF000080000001, 0x0000000000000000), UInt128(0x0000000000000001, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x3ffe000100000001, 0x0000000000000000), UInt128(0x3fff00017fff0001, 0x7ffd00027fff0002), UInt128(0x7FFF000080000001, 0x0000000000000000), UInt128(0x7FFF000080000001, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x3ffe000100000001, 0x0000000000000000), UInt128(0x7fff000080000000, 0xc0000000ffff0000), UInt128(0x7FFF000080000001, 0x0000000000000000), UInt128(0xFFFFFFFFFFFFFFFF, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x8000ffff7fffffff, 0x0000000000000000), UInt128(0x0000000000000000, 0x7fff000080000000), UInt128(0x7FFF000080000001, 0x0000000000000000), UInt128(0x0000000000000000, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x8000ffff7fffffff, 0x0000000000000000), UInt128(0x0000000000000000, 0xfffe000100000001), UInt128(0x7FFF000080000001, 0x0000000000000000), UInt128(0x0000000000000001, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x8000ffff7fffffff, 0x0000000000000000), UInt128(0x3fff00017fff0001, 0xbffd000180000001), UInt128(0x7FFF000080000001, 0x0000000000000000), UInt128(0x7FFF000080000001, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x8000ffff7fffffff, 0x0000000000000000), UInt128(0x7fff000080000000, 0xffffffffffffffff), UInt128(0x7FFF000080000001, 0x0000000000000000), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0xffffffffffffffff), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000000), UInt128(0x0000000000000001, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x7fff000080000000, 0x8000ffff7fffffff), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000000), UInt128(0x7FFF000080000001, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0xfffffffffffffffe, 0x0000000000000001), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000000), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0xffffffffffffffff, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0xffffffffffffffff, 0x0000000000000000), UInt128(0x0000000000000000, 0xffffffffffffffff), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000000), UInt128(0x0000000000000001, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0xffffffffffffffff, 0x0000000000000000), UInt128(0x7fff000080000000, 0x8000ffff7fffffff), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000000), UInt128(0x7FFF000080000001, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0xffffffffffffffff, 0x0000000000000000), UInt128(0xfffffffffffffffe, 0x0000000000000001), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000000), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x8000ffff7fffffff, 0x0000000000000000), UInt128(0x0000000000000000, 0x7fff000080000000), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000000), UInt128(0x0000000000000000, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x8000ffff7fffffff, 0x0000000000000000), UInt128(0x0000000000000001, 0x7fff00007fffffff), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000000), UInt128(0x0000000000000001, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x8000ffff7fffffff, 0x0000000000000000), UInt128(0x7fff000080000000, 0xffffffffffffffff), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000000), UInt128(0x7FFF000080000001, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x8000ffff7fffffff, 0x0000000000000000), UInt128(0xfffffffffffffffe, 0x7fff000080000001), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000000), UInt128(0xFFFFFFFFFFFFFFFF, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0x0000000000000000, 0xfffffffffffffffe), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000000), UInt128(0x0000000000000000, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0x0000000000000001, 0xfffffffffffffffd), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000000), UInt128(0x0000000000000001, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0x7fff000080000001, 0x8000ffff7ffffffd), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000000), UInt128(0x7FFF000080000001, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0xfffffffffffffffe, 0xffffffffffffffff), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000000), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000001), UInt128(0x0000000000000000, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000001), UInt128(0x0000000000000001, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x7fff000080000001, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000001), UInt128(0x7FFF000080000001, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0xffffffffffffffff, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000001), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000001), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000001), UInt128(0x0000000000000000, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x0000000000000001, 0x0000000000000001), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000001), UInt128(0x0000000000000001, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x7fff000080000001, 0x0000000000000001), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000001), UInt128(0x7FFF000080000001, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0xffffffffffffffff, 0x0000000000000001), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000001), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x7fff000080000001), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000001), UInt128(0x0000000000000000, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x0000000000000001, 0x7fff000080000001), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000001), UInt128(0x0000000000000001, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x7fff000080000001, 0x7fff000080000001), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000001), UInt128(0x7FFF000080000001, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0xffffffffffffffff, 0x7fff000080000001), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000001), UInt128(0xFFFFFFFFFFFFFFFF, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0xffffffffffffffff), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000001), UInt128(0x0000000000000000, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x0000000000000001, 0xffffffffffffffff), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000001), UInt128(0x0000000000000001, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x7fff000080000001, 0xffffffffffffffff), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000001), UInt128(0x7FFF000080000001, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0xffffffffffffffff, 0xffffffffffffffff), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000001), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000001, 0x0000000000000001), UInt128(0x0000000000000000, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000001), UInt128(0x0000000000000001, 0x0000000000000001), UInt128(0x0000000000000001, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x7fff000080000001, 0x0000000000000000), UInt128(0x0000000000000000, 0x7fff000080000001), UInt128(0x0000000000000001, 0x0000000000000001), UInt128(0x7FFF000080000001, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0xffffffffffffffff, 0x0000000000000000), UInt128(0x0000000000000000, 0xffffffffffffffff), UInt128(0x0000000000000001, 0x0000000000000001), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x0000000000000001, 0x0000000000000001), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000001, 0x0000000000000001), UInt128(0x0000000000000000, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x0000000000000002, 0x0000000000000001), UInt128(0x0000000000000000, 0x0000000000000001), UInt128(0x0000000000000001, 0x0000000000000001), UInt128(0x0000000000000001, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x7fff000080000002, 0x0000000000000001), UInt128(0x0000000000000000, 0x7fff000080000001), UInt128(0x0000000000000001, 0x0000000000000001), UInt128(0x7FFF000080000001, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000001), UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0x0000000000000001, 0x0000000000000001), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x7fff000080000001, 0x7fff000080000001), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000001, 0x0000000000000001), UInt128(0x0000000000000000, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x7fff000080000002, 0x7fff000080000001), UInt128(0x0000000000000000, 0x0000000000000001), UInt128(0x0000000000000001, 0x0000000000000001), UInt128(0x0000000000000001, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0xfffe000100000002, 0x7fff000080000001), UInt128(0x0000000000000000, 0x7fff000080000001), UInt128(0x0000000000000001, 0x0000000000000001), UInt128(0x7FFF000080000001, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x7fff000080000000, 0x7fff000080000001), UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0x0000000000000001, 0x0000000000000001), UInt128(0xFFFFFFFFFFFFFFFF, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0xffffffffffffffff, 0xffffffffffffffff), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000001, 0x0000000000000001), UInt128(0x0000000000000000, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0xffffffffffffffff), UInt128(0x0000000000000000, 0x0000000000000002), UInt128(0x0000000000000001, 0x0000000000000001), UInt128(0x0000000000000001, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x7fff000080000000, 0xffffffffffffffff), UInt128(0x0000000000000000, 0x7fff000080000002), UInt128(0x0000000000000001, 0x0000000000000001), UInt128(0x7FFF000080000001, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0xfffffffffffffffe, 0xffffffffffffffff), UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0x0000000000000001, 0x0000000000000001), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x7FFF000080000001, 0x0000000000000001), UInt128(0x0000000000000000, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0x0000000000000000, 0x7fff000080000001), UInt128(0x7FFF000080000001, 0x0000000000000001), UInt128(0x0000000000000001, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x7fff000080000001, 0x0000000000000000), UInt128(0x3fff00017fff0001, 0x3ffe000100000001), UInt128(0x7FFF000080000001, 0x0000000000000001), UInt128(0x7FFF000080000001, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0xffffffffffffffff, 0x0000000000000000), UInt128(0x7fff000080000000, 0x8000ffff7fffffff), UInt128(0x7FFF000080000001, 0x0000000000000001), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x7fff000080000001, 0x0000000000000001), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x7FFF000080000001, 0x0000000000000001), UInt128(0x0000000000000000, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x7fff000080000002, 0x0000000000000001), UInt128(0x0000000000000000, 0x7fff000080000001), UInt128(0x7FFF000080000001, 0x0000000000000001), UInt128(0x0000000000000001, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0xfffe000100000002, 0x0000000000000001), UInt128(0x3fff00017fff0001, 0x3ffe000100000001), UInt128(0x7FFF000080000001, 0x0000000000000001), UInt128(0x7FFF000080000001, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x7fff000080000000, 0x0000000000000001), UInt128(0x7fff000080000000, 0x8000ffff80000000), UInt128(0x7FFF000080000001, 0x0000000000000001), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x3ffe000100000001, 0x7fff000080000001), UInt128(0x0000000000000000, 0x3fff00017fff0001), UInt128(0x7FFF000080000001, 0x0000000000000001), UInt128(0x0000000000000000, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x3ffe000100000002, 0x7fff000080000001), UInt128(0x0000000000000000, 0xbffe0001ffff0002), UInt128(0x7FFF000080000001, 0x0000000000000001), UInt128(0x0000000000000001, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0xbffd000180000002, 0x7fff000080000001), UInt128(0x3fff00017fff0001, 0x7ffd00027fff0002), UInt128(0x7FFF000080000001, 0x0000000000000001), UInt128(0x7FFF000080000001, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x3ffe000100000000, 0x7fff000080000001), UInt128(0x7fff000080000000, 0xc0000000ffff0001), UInt128(0x7FFF000080000001, 0x0000000000000001), UInt128(0xFFFFFFFFFFFFFFFF, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x8000ffff7fffffff, 0xffffffffffffffff), UInt128(0x0000000000000000, 0x7fff000080000000), UInt128(0x7FFF000080000001, 0x0000000000000001), UInt128(0x0000000000000000, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x8000ffff80000000, 0xffffffffffffffff), UInt128(0x0000000000000000, 0xfffe000100000001), UInt128(0x7FFF000080000001, 0x0000000000000001), UInt128(0x0000000000000001, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0xffffffffffffffff), UInt128(0x3fff00017fff0001, 0xbffd000180000002), UInt128(0x7FFF000080000001, 0x0000000000000001), UInt128(0x7FFF000080000001, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x8000ffff7ffffffe, 0xffffffffffffffff), UInt128(0x7fff000080000001, 0x0000000000000000), UInt128(0x7FFF000080000001, 0x0000000000000001), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000001), UInt128(0x0000000000000000, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0x0000000000000000, 0xffffffffffffffff), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000001), UInt128(0x0000000000000001, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x7fff000080000001, 0x0000000000000000), UInt128(0x7fff000080000000, 0x8000ffff7fffffff), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000001), UInt128(0x7FFF000080000001, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0xffffffffffffffff, 0x0000000000000000), UInt128(0xfffffffffffffffe, 0x0000000000000001), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000001), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0xffffffffffffffff, 0x0000000000000001), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000001), UInt128(0x0000000000000000, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000001), UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000001), UInt128(0x0000000000000001, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x7fff000080000000, 0x0000000000000001), UInt128(0x7fff000080000000, 0x8000ffff80000000), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000001), UInt128(0x7FFF000080000001, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0xfffffffffffffffe, 0x0000000000000001), UInt128(0xfffffffffffffffe, 0x0000000000000002), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000001), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x8000ffff7fffffff, 0x7fff000080000001), UInt128(0x0000000000000000, 0x7fff000080000000), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000001), UInt128(0x0000000000000000, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x8000ffff80000000, 0x7fff000080000001), UInt128(0x0000000000000001, 0x7fff00007fffffff), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000001), UInt128(0x0000000000000001, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x7fff000080000001), UInt128(0x7fff000080000001, 0x0000000000000000), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000001), UInt128(0x7FFF000080000001, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x8000ffff7ffffffe, 0x7fff000080000001), UInt128(0xfffffffffffffffe, 0x7fff000080000002), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000001), UInt128(0xFFFFFFFFFFFFFFFF, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x0000000000000001, 0xffffffffffffffff), UInt128(0x0000000000000000, 0xfffffffffffffffe), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000001), UInt128(0x0000000000000000, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x0000000000000002, 0xffffffffffffffff), UInt128(0x0000000000000001, 0xfffffffffffffffd), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000001), UInt128(0x0000000000000001, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x7fff000080000002, 0xffffffffffffffff), UInt128(0x7fff000080000001, 0x8000ffff7ffffffd), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000001), UInt128(0x7FFF000080000001, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0xffffffffffffffff), UInt128(0xffffffffffffffff, 0x0000000000000000), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000001), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x7FFF000080000001), UInt128(0x0000000000000000, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x7fff000080000001, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x7FFF000080000001), UInt128(0x0000000000000001, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x3ffe000100000001, 0x0000000000000000), UInt128(0x0000000000000000, 0x3fff00017fff0001), UInt128(0x0000000000000000, 0x7FFF000080000001), UInt128(0x7FFF000080000001, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x8000ffff7fffffff, 0x0000000000000000), UInt128(0x0000000000000000, 0x7fff000080000000), UInt128(0x0000000000000000, 0x7FFF000080000001), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x7fff000080000001), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x7FFF000080000001), UInt128(0x0000000000000000, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x7fff000080000001, 0x7fff000080000001), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x7FFF000080000001), UInt128(0x0000000000000001, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x3ffe000100000001, 0x7fff000080000001), UInt128(0x0000000000000000, 0x3fff00017fff0001), UInt128(0x0000000000000000, 0x7FFF000080000001), UInt128(0x7FFF000080000001, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x8000ffff7fffffff, 0x7fff000080000001), UInt128(0x0000000000000000, 0x7fff000080000000), UInt128(0x0000000000000000, 0x7FFF000080000001), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x3fff00017fff0001, 0x3ffe000100000001), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x7FFF000080000001), UInt128(0x0000000000000000, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0xbffe0001ffff0002, 0x3ffe000100000001), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x7FFF000080000001), UInt128(0x0000000000000001, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x7ffd00027fff0002, 0x3ffe000100000001), UInt128(0x0000000000000000, 0x3fff00017fff0001), UInt128(0x0000000000000000, 0x7FFF000080000001), UInt128(0x7FFF000080000001, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0xc0000000ffff0000, 0x3ffe000100000001), UInt128(0x0000000000000000, 0x7fff000080000000), UInt128(0x0000000000000000, 0x7FFF000080000001), UInt128(0xFFFFFFFFFFFFFFFF, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x7fff000080000000, 0x8000ffff7fffffff), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x7FFF000080000001), UInt128(0x0000000000000000, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0xfffe000100000001, 0x8000ffff7fffffff), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x7FFF000080000001), UInt128(0x0000000000000001, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0xbffd000180000001, 0x8000ffff7fffffff), UInt128(0x0000000000000000, 0x3fff00017fff0001), UInt128(0x0000000000000000, 0x7FFF000080000001), UInt128(0x7FFF000080000001, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0xffffffffffffffff, 0x8000ffff7fffffff), UInt128(0x0000000000000000, 0x7fff000080000000), UInt128(0x0000000000000000, 0x7FFF000080000001), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000001, 0x7FFF000080000001), UInt128(0x0000000000000000, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x7fff000080000001, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000001), UInt128(0x0000000000000001, 0x7FFF000080000001), UInt128(0x0000000000000001, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x3ffe000100000001, 0x0000000000000000), UInt128(0x0000000000000000, 0xbffe0001ffff0002), UInt128(0x0000000000000001, 0x7FFF000080000001), UInt128(0x7FFF000080000001, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x8000ffff7fffffff, 0x0000000000000000), UInt128(0x0000000000000001, 0x7fff00007fffffff), UInt128(0x0000000000000001, 0x7FFF000080000001), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x0000000000000001, 0x7fff000080000001), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000001, 0x7FFF000080000001), UInt128(0x0000000000000000, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x7fff000080000002, 0x7fff000080000001), UInt128(0x0000000000000000, 0x0000000000000001), UInt128(0x0000000000000001, 0x7FFF000080000001), UInt128(0x0000000000000001, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x3ffe000100000002, 0x7fff000080000001), UInt128(0x0000000000000000, 0xbffe0001ffff0002), UInt128(0x0000000000000001, 0x7FFF000080000001), UInt128(0x7FFF000080000001, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x8000ffff80000000, 0x7fff000080000001), UInt128(0x0000000000000001, 0x7fff00007fffffff), UInt128(0x0000000000000001, 0x7FFF000080000001), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0xbffe0001ffff0002, 0x3ffe000100000001), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000001, 0x7FFF000080000001), UInt128(0x0000000000000000, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x3ffd00027fff0003, 0x3ffe000100000001), UInt128(0x0000000000000000, 0x0000000000000002), UInt128(0x0000000000000001, 0x7FFF000080000001), UInt128(0x0000000000000001, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0xfffc0002ffff0003, 0x3ffe000100000001), UInt128(0x0000000000000000, 0xbffe0001ffff0002), UInt128(0x0000000000000001, 0x7FFF000080000001), UInt128(0x7FFF000080000001, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x3fff00017fff0001, 0x3ffe000100000001), UInt128(0x0000000000000001, 0x7fff000080000000), UInt128(0x0000000000000001, 0x7FFF000080000001), UInt128(0xFFFFFFFFFFFFFFFF, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x7fff00007fffffff, 0x8000ffff7fffffff), UInt128(0x0000000000000000, 0x0000000000000001), UInt128(0x0000000000000001, 0x7FFF000080000001), UInt128(0x0000000000000000, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0xfffe000100000000, 0x8000ffff7fffffff), UInt128(0x0000000000000000, 0x0000000000000002), UInt128(0x0000000000000001, 0x7FFF000080000001), UInt128(0x0000000000000001, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0xbffd000180000000, 0x8000ffff7fffffff), UInt128(0x0000000000000000, 0xbffe0001ffff0003), UInt128(0x0000000000000001, 0x7FFF000080000001), UInt128(0x7FFF000080000001, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0xfffffffffffffffe, 0x8000ffff7fffffff), UInt128(0x0000000000000001, 0x7fff000080000000), UInt128(0x0000000000000001, 0x7FFF000080000001), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x7FFF000080000001, 0x7FFF000080000001), UInt128(0x0000000000000000, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x7fff000080000001, 0x0000000000000000), UInt128(0x0000000000000000, 0x7fff000080000001), UInt128(0x7FFF000080000001, 0x7FFF000080000001), UInt128(0x0000000000000001, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x3ffe000100000001, 0x0000000000000000), UInt128(0x3fff00017fff0001, 0x7ffd00027fff0002), UInt128(0x7FFF000080000001, 0x7FFF000080000001), UInt128(0x7FFF000080000001, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x8000ffff7fffffff, 0x0000000000000000), UInt128(0x7fff000080000000, 0xffffffffffffffff), UInt128(0x7FFF000080000001, 0x7FFF000080000001), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x7fff000080000001, 0x7fff000080000001), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x7FFF000080000001, 0x7FFF000080000001), UInt128(0x0000000000000000, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0xfffe000100000002, 0x7fff000080000001), UInt128(0x0000000000000000, 0x7fff000080000001), UInt128(0x7FFF000080000001, 0x7FFF000080000001), UInt128(0x0000000000000001, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0xbffd000180000002, 0x7fff000080000001), UInt128(0x3fff00017fff0001, 0x7ffd00027fff0002), UInt128(0x7FFF000080000001, 0x7FFF000080000001), UInt128(0x7FFF000080000001, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x7fff000080000001), UInt128(0x7fff000080000001, 0x0000000000000000), UInt128(0x7FFF000080000001, 0x7FFF000080000001), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x7ffd00027fff0002, 0x3ffe000100000001), UInt128(0x0000000000000000, 0x3fff00017fff0001), UInt128(0x7FFF000080000001, 0x7FFF000080000001), UInt128(0x0000000000000000, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0xfffc0002ffff0003, 0x3ffe000100000001), UInt128(0x0000000000000000, 0xbffe0001ffff0002), UInt128(0x7FFF000080000001, 0x7FFF000080000001), UInt128(0x0000000000000001, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0xbffb00037fff0003, 0x3ffe000100000001), UInt128(0x3fff00017fff0001, 0xbffc0003fffe0003), UInt128(0x7FFF000080000001, 0x7FFF000080000001), UInt128(0x7FFF000080000001, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0xfffe0001ffff0001, 0x3ffe000100000001), UInt128(0x7fff000080000001, 0x3fff00017fff0000), UInt128(0x7FFF000080000001, 0x7FFF000080000001), UInt128(0xFFFFFFFFFFFFFFFF, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0xffffffffffffffff, 0x8000ffff7fffffff), UInt128(0x0000000000000000, 0x7fff000080000000), UInt128(0x7FFF000080000001, 0x7FFF000080000001), UInt128(0x0000000000000000, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x7fff000080000000, 0x8000ffff7fffffff), UInt128(0x0000000000000000, 0xfffe000100000002), UInt128(0x7FFF000080000001, 0x7FFF000080000001), UInt128(0x0000000000000001, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x3ffe000100000000, 0x8000ffff7fffffff), UInt128(0x3fff00017fff0001, 0xfffc0002ffff0003), UInt128(0x7FFF000080000001, 0x7FFF000080000001), UInt128(0x7FFF000080000001, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x8000ffff7ffffffe, 0x8000ffff7fffffff), UInt128(0x7fff000080000001, 0x7fff000080000000), UInt128(0x7FFF000080000001, 0x7FFF000080000001), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0xFFFFFFFFFFFFFFFF, 0x7FFF000080000001), UInt128(0x0000000000000000, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x7fff000080000001, 0x0000000000000000), UInt128(0x0000000000000000, 0xffffffffffffffff), UInt128(0xFFFFFFFFFFFFFFFF, 0x7FFF000080000001), UInt128(0x0000000000000001, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x3ffe000100000001, 0x0000000000000000), UInt128(0x7fff000080000000, 0xc0000000ffff0000), UInt128(0xFFFFFFFFFFFFFFFF, 0x7FFF000080000001), UInt128(0x7FFF000080000001, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x8000ffff7fffffff, 0x0000000000000000), UInt128(0xfffffffffffffffe, 0x7fff000080000001), UInt128(0xFFFFFFFFFFFFFFFF, 0x7FFF000080000001), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0xffffffffffffffff, 0x7fff000080000001), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0xFFFFFFFFFFFFFFFF, 0x7FFF000080000001), UInt128(0x0000000000000000, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x7fff000080000000, 0x7fff000080000001), UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0xFFFFFFFFFFFFFFFF, 0x7FFF000080000001), UInt128(0x0000000000000001, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x3ffe000100000000, 0x7fff000080000001), UInt128(0x7fff000080000000, 0xc0000000ffff0001), UInt128(0xFFFFFFFFFFFFFFFF, 0x7FFF000080000001), UInt128(0x7FFF000080000001, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x8000ffff7ffffffe, 0x7fff000080000001), UInt128(0xfffffffffffffffe, 0x7fff000080000002), UInt128(0xFFFFFFFFFFFFFFFF, 0x7FFF000080000001), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0xc0000000ffff0000, 0x3ffe000100000001), UInt128(0x0000000000000000, 0x7fff000080000000), UInt128(0xFFFFFFFFFFFFFFFF, 0x7FFF000080000001), UInt128(0x0000000000000000, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x3fff00017fff0001, 0x3ffe000100000001), UInt128(0x0000000000000001, 0x7fff000080000000), UInt128(0xFFFFFFFFFFFFFFFF, 0x7FFF000080000001), UInt128(0x0000000000000001, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0xfffe0001ffff0001, 0x3ffe000100000001), UInt128(0x7fff000080000001, 0x3fff00017fff0000), UInt128(0xFFFFFFFFFFFFFFFF, 0x7FFF000080000001), UInt128(0x7FFF000080000001, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x400100007ffeffff, 0x3ffe000100000001), UInt128(0xfffffffffffffffe, 0xfffe000100000002), UInt128(0xFFFFFFFFFFFFFFFF, 0x7FFF000080000001), UInt128(0xFFFFFFFFFFFFFFFF, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x7fff000080000001, 0x8000ffff7fffffff), UInt128(0x0000000000000000, 0xfffffffffffffffe), UInt128(0xFFFFFFFFFFFFFFFF, 0x7FFF000080000001), UInt128(0x0000000000000000, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0xfffe000100000002, 0x8000ffff7fffffff), UInt128(0x0000000000000001, 0xfffffffffffffffd), UInt128(0xFFFFFFFFFFFFFFFF, 0x7FFF000080000001), UInt128(0x0000000000000001, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0xbffd000180000002, 0x8000ffff7fffffff), UInt128(0x7fff000080000001, 0xc0000000fffefffe), UInt128(0xFFFFFFFFFFFFFFFF, 0x7FFF000080000001), UInt128(0x7FFF000080000001, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x8000ffff7fffffff), UInt128(0xffffffffffffffff, 0x7fff000080000000), UInt128(0xFFFFFFFFFFFFFFFF, 0x7FFF000080000001), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0xFFFFFFFFFFFFFFFF), UInt128(0x0000000000000000, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0xffffffffffffffff, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0xFFFFFFFFFFFFFFFF), UInt128(0x0000000000000001, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x8000ffff7fffffff, 0x0000000000000000), UInt128(0x0000000000000000, 0x7fff000080000000), UInt128(0x0000000000000000, 0xFFFFFFFFFFFFFFFF), UInt128(0x7FFF000080000001, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0x0000000000000000, 0xfffffffffffffffe), UInt128(0x0000000000000000, 0xFFFFFFFFFFFFFFFF), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0xffffffffffffffff), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0xFFFFFFFFFFFFFFFF), UInt128(0x0000000000000000, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0xffffffffffffffff, 0xffffffffffffffff), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0xFFFFFFFFFFFFFFFF), UInt128(0x0000000000000001, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x8000ffff7fffffff, 0xffffffffffffffff), UInt128(0x0000000000000000, 0x7fff000080000000), UInt128(0x0000000000000000, 0xFFFFFFFFFFFFFFFF), UInt128(0x7FFF000080000001, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x0000000000000001, 0xffffffffffffffff), UInt128(0x0000000000000000, 0xfffffffffffffffe), UInt128(0x0000000000000000, 0xFFFFFFFFFFFFFFFF), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x7fff000080000000, 0x8000ffff7fffffff), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0xFFFFFFFFFFFFFFFF), UInt128(0x0000000000000000, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x7fff00007fffffff, 0x8000ffff7fffffff), UInt128(0x0000000000000000, 0x0000000000000001), UInt128(0x0000000000000000, 0xFFFFFFFFFFFFFFFF), UInt128(0x0000000000000001, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0xffffffffffffffff, 0x8000ffff7fffffff), UInt128(0x0000000000000000, 0x7fff000080000000), UInt128(0x0000000000000000, 0xFFFFFFFFFFFFFFFF), UInt128(0x7FFF000080000001, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x7fff000080000001, 0x8000ffff7fffffff), UInt128(0x0000000000000000, 0xfffffffffffffffe), UInt128(0x0000000000000000, 0xFFFFFFFFFFFFFFFF), UInt128(0xFFFFFFFFFFFFFFFF, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0xfffffffffffffffe, 0x0000000000000001), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0xFFFFFFFFFFFFFFFF), UInt128(0x0000000000000000, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0xfffffffffffffffd, 0x0000000000000001), UInt128(0x0000000000000000, 0x0000000000000001), UInt128(0x0000000000000000, 0xFFFFFFFFFFFFFFFF), UInt128(0x0000000000000001, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x8000ffff7ffffffd, 0x0000000000000001), UInt128(0x0000000000000000, 0x7fff000080000001), UInt128(0x0000000000000000, 0xFFFFFFFFFFFFFFFF), UInt128(0x7FFF000080000001, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0xffffffffffffffff, 0x0000000000000001), UInt128(0x0000000000000000, 0xfffffffffffffffe), UInt128(0x0000000000000000, 0xFFFFFFFFFFFFFFFF), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000001, 0xFFFFFFFFFFFFFFFF), UInt128(0x0000000000000000, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0xffffffffffffffff, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000001), UInt128(0x0000000000000001, 0xFFFFFFFFFFFFFFFF), UInt128(0x0000000000000001, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x8000ffff7fffffff, 0x0000000000000000), UInt128(0x0000000000000000, 0xfffe000100000001), UInt128(0x0000000000000001, 0xFFFFFFFFFFFFFFFF), UInt128(0x7FFF000080000001, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0x0000000000000001, 0xfffffffffffffffd), UInt128(0x0000000000000001, 0xFFFFFFFFFFFFFFFF), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x0000000000000001, 0xffffffffffffffff), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000001, 0xFFFFFFFFFFFFFFFF), UInt128(0x0000000000000000, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0xffffffffffffffff), UInt128(0x0000000000000000, 0x0000000000000002), UInt128(0x0000000000000001, 0xFFFFFFFFFFFFFFFF), UInt128(0x0000000000000001, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x8000ffff80000000, 0xffffffffffffffff), UInt128(0x0000000000000000, 0xfffe000100000001), UInt128(0x0000000000000001, 0xFFFFFFFFFFFFFFFF), UInt128(0x7FFF000080000001, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x0000000000000002, 0xffffffffffffffff), UInt128(0x0000000000000001, 0xfffffffffffffffd), UInt128(0x0000000000000001, 0xFFFFFFFFFFFFFFFF), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0xfffe000100000001, 0x8000ffff7fffffff), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000001, 0xFFFFFFFFFFFFFFFF), UInt128(0x0000000000000000, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0xfffe000100000000, 0x8000ffff7fffffff), UInt128(0x0000000000000000, 0x0000000000000002), UInt128(0x0000000000000001, 0xFFFFFFFFFFFFFFFF), UInt128(0x0000000000000001, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x7fff000080000000, 0x8000ffff7fffffff), UInt128(0x0000000000000000, 0xfffe000100000002), UInt128(0x0000000000000001, 0xFFFFFFFFFFFFFFFF), UInt128(0x7FFF000080000001, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0xfffe000100000002, 0x8000ffff7fffffff), UInt128(0x0000000000000001, 0xfffffffffffffffd), UInt128(0x0000000000000001, 0xFFFFFFFFFFFFFFFF), UInt128(0xFFFFFFFFFFFFFFFF, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0xfffffffffffffffd, 0x0000000000000001), UInt128(0x0000000000000000, 0x0000000000000001), UInt128(0x0000000000000001, 0xFFFFFFFFFFFFFFFF), UInt128(0x0000000000000000, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0xfffffffffffffffc, 0x0000000000000001), UInt128(0x0000000000000000, 0x0000000000000003), UInt128(0x0000000000000001, 0xFFFFFFFFFFFFFFFF), UInt128(0x0000000000000001, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x8000ffff7ffffffc, 0x0000000000000001), UInt128(0x0000000000000000, 0xfffe000100000003), UInt128(0x0000000000000001, 0xFFFFFFFFFFFFFFFF), UInt128(0x7FFF000080000001, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0xfffffffffffffffe, 0x0000000000000001), UInt128(0x0000000000000001, 0xfffffffffffffffe), UInt128(0x0000000000000001, 0xFFFFFFFFFFFFFFFF), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x7FFF000080000001, 0xFFFFFFFFFFFFFFFF), UInt128(0x0000000000000000, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0xffffffffffffffff, 0x0000000000000000), UInt128(0x0000000000000000, 0x7fff000080000001), UInt128(0x7FFF000080000001, 0xFFFFFFFFFFFFFFFF), UInt128(0x0000000000000001, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x8000ffff7fffffff, 0x0000000000000000), UInt128(0x3fff00017fff0001, 0xbffd000180000001), UInt128(0x7FFF000080000001, 0xFFFFFFFFFFFFFFFF), UInt128(0x7FFF000080000001, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0x7fff000080000001, 0x8000ffff7ffffffd), UInt128(0x7FFF000080000001, 0xFFFFFFFFFFFFFFFF), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x7fff000080000001, 0xffffffffffffffff), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x7FFF000080000001, 0xFFFFFFFFFFFFFFFF), UInt128(0x0000000000000000, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x7fff000080000000, 0xffffffffffffffff), UInt128(0x0000000000000000, 0x7fff000080000002), UInt128(0x7FFF000080000001, 0xFFFFFFFFFFFFFFFF), UInt128(0x0000000000000001, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0xffffffffffffffff), UInt128(0x3fff00017fff0001, 0xbffd000180000002), UInt128(0x7FFF000080000001, 0xFFFFFFFFFFFFFFFF), UInt128(0x7FFF000080000001, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x7fff000080000002, 0xffffffffffffffff), UInt128(0x7fff000080000001, 0x8000ffff7ffffffd), UInt128(0x7FFF000080000001, 0xFFFFFFFFFFFFFFFF), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0xbffd000180000001, 0x8000ffff7fffffff), UInt128(0x0000000000000000, 0x3fff00017fff0001), UInt128(0x7FFF000080000001, 0xFFFFFFFFFFFFFFFF), UInt128(0x0000000000000000, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0xbffd000180000000, 0x8000ffff7fffffff), UInt128(0x0000000000000000, 0xbffe0001ffff0003), UInt128(0x7FFF000080000001, 0xFFFFFFFFFFFFFFFF), UInt128(0x0000000000000001, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x3ffe000100000000, 0x8000ffff7fffffff), UInt128(0x3fff00017fff0001, 0xfffc0002ffff0003), UInt128(0x7FFF000080000001, 0xFFFFFFFFFFFFFFFF), UInt128(0x7FFF000080000001, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0xbffd000180000002, 0x8000ffff7fffffff), UInt128(0x7fff000080000001, 0xc0000000fffefffe), UInt128(0x7FFF000080000001, 0xFFFFFFFFFFFFFFFF), UInt128(0xFFFFFFFFFFFFFFFF, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x8000ffff7ffffffd, 0x0000000000000001), UInt128(0x0000000000000000, 0x7fff000080000001), UInt128(0x7FFF000080000001, 0xFFFFFFFFFFFFFFFF), UInt128(0x0000000000000000, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x8000ffff7ffffffc, 0x0000000000000001), UInt128(0x0000000000000000, 0xfffe000100000003), UInt128(0x7FFF000080000001, 0xFFFFFFFFFFFFFFFF), UInt128(0x0000000000000001, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x0001fffefffffffc, 0x0000000000000001), UInt128(0x3fff00017fff0002, 0x3ffc000200000003), UInt128(0x7FFF000080000001, 0xFFFFFFFFFFFFFFFF), UInt128(0x7FFF000080000001, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x8000ffff7ffffffe, 0x0000000000000001), UInt128(0x7fff000080000001, 0xfffffffffffffffe), UInt128(0x7FFF000080000001, 0xFFFFFFFFFFFFFFFF), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF), UInt128(0x0000000000000000, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0xffffffffffffffff, 0x0000000000000000), UInt128(0x0000000000000000, 0xffffffffffffffff), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF), UInt128(0x0000000000000001, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x8000ffff7fffffff, 0x0000000000000000), UInt128(0x7fff000080000000, 0xffffffffffffffff), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF), UInt128(0x7FFF000080000001, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0xfffffffffffffffe, 0xffffffffffffffff), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000000));
    CheckMultiplyHigh(UInt128(0xffffffffffffffff, 0xffffffffffffffff), UInt128(0x0000000000000000, 0x0000000000000000), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF), UInt128(0x0000000000000000, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0xfffffffffffffffe, 0xffffffffffffffff), UInt128(0x0000000000000001, 0x0000000000000000), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF), UInt128(0x0000000000000001, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x8000ffff7ffffffe, 0xffffffffffffffff), UInt128(0x7fff000080000001, 0x0000000000000000), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF), UInt128(0x7FFF000080000001, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0xffffffffffffffff), UInt128(0xffffffffffffffff, 0x0000000000000000), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF), UInt128(0xFFFFFFFFFFFFFFFF, 0x0000000000000001));
    CheckMultiplyHigh(UInt128(0xffffffffffffffff, 0x8000ffff7fffffff), UInt128(0x0000000000000000, 0x7fff000080000000), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF), UInt128(0x0000000000000000, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0xfffffffffffffffe, 0x8000ffff7fffffff), UInt128(0x0000000000000001, 0x7fff000080000000), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF), UInt128(0x0000000000000001, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x8000ffff7ffffffe, 0x8000ffff7fffffff), UInt128(0x7fff000080000001, 0x7fff000080000000), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF), UInt128(0x7FFF000080000001, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x8000ffff7fffffff), UInt128(0xffffffffffffffff, 0x7fff000080000000), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF), UInt128(0xFFFFFFFFFFFFFFFF, 0x7FFF000080000001));
    CheckMultiplyHigh(UInt128(0xffffffffffffffff, 0x0000000000000001), UInt128(0x0000000000000000, 0xfffffffffffffffe), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF), UInt128(0x0000000000000000, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0xfffffffffffffffe, 0x0000000000000001), UInt128(0x0000000000000001, 0xfffffffffffffffe), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF), UInt128(0x0000000000000001, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x8000ffff7ffffffe, 0x0000000000000001), UInt128(0x7fff000080000001, 0xfffffffffffffffe), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF), UInt128(0x7FFF000080000001, 0xFFFFFFFFFFFFFFFF));
    CheckMultiplyHigh(UInt128(0x0000000000000000, 0x0000000000000001), UInt128(0xffffffffffffffff, 0xfffffffffffffffe), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF));
}

TEST_CASE("Numerics - Checked UInt128")
{
    using namespace weave::numerics;

    SECTION("Checked Addition")
    {
        {
            UInt128 result{1, 1};
            CHECK_FALSE(UInt128::CheckedAdd(result, UInt128(0, 0), UInt128(0, 0)));
            CHECK(result == UInt128(0, 0));
        }
        {
            UInt128 result{1, 1};
            CHECK_FALSE(UInt128::CheckedAdd(result, UInt128(1, 0), UInt128(1, 0)));
            CHECK(result == UInt128(2, 0));
        }
        {
            UInt128 result{1, 1};
            CHECK_FALSE(UInt128::CheckedAdd(result, UInt128(1, 1), UInt128(1, 1)));
            CHECK(result == UInt128(2, 2));
        }
        {
            UInt128 result{1, 1};
            CHECK_FALSE(UInt128::CheckedAdd(result, UInt128(0, 0xFFFFFFFFFFFFFFFF), UInt128(0, 1)));
            CHECK(result == UInt128(1, 0));
        }
        {
            UInt128 result{1, 1};
            CHECK_FALSE(UInt128::CheckedAdd(result, UInt128(0, 0xFFFFFFFFFFFFFFFF), UInt128(1, 0)));
            CHECK(result == UInt128(1, 0xFFFFFFFFFFFFFFFF));
        }
        {
            UInt128 result{1, 1};
            CHECK(UInt128::CheckedAdd(result, UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF), UInt128(0, 1)));
            CHECK(result == UInt128(0, 0));
        }
        {
            UInt128 result{1, 1};
            CHECK(UInt128::CheckedAdd(result, UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF), UInt128(0, 0xFFFFFFFFFFFFFFFF)));
            CHECK(result == UInt128(0, 0xFFFFFFFFFFFFFFFE));
        }
        {
            UInt128 result{1, 1};
            CHECK(UInt128::CheckedAdd(result, UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF), UInt128(0xFFFFFFFFFFFFFFFF, 0)));
            CHECK(result == UInt128(0xFFFFFFFFFFFFFFFE, 0xFFFFFFFFFFFFFFFF));
        }
    }

    SECTION("Checked subtraction")
    {
        {
            UInt128 result{1, 1};
            CHECK_FALSE(UInt128::CheckedSubtract(result, UInt128(0, 0), UInt128(0, 0)));
            CHECK(result == UInt128(0, 0));
        }
        {
            UInt128 result{1, 1};
            CHECK_FALSE(UInt128::CheckedSubtract(result, UInt128(1, 0), UInt128(1, 0)));
            CHECK(result == UInt128(0, 0));
        }
        {
            UInt128 result{1, 1};
            CHECK_FALSE(UInt128::CheckedSubtract(result, UInt128(1, 1), UInt128(1, 1)));
            CHECK(result == UInt128(0, 0));
        }
        {
            UInt128 result{1, 1};
            CHECK_FALSE(UInt128::CheckedSubtract(result, UInt128(0, 0xFFFFFFFFFFFFFFFF), UInt128(0, 1)));
            CHECK(result == UInt128(0, 0xFFFFFFFFFFFFFFFE));
        }
        {
            UInt128 result{1, 1};
            CHECK(UInt128::CheckedSubtract(result, UInt128(0, 0xFFFFFFFFFFFFFFFF), UInt128(1, 0)));
            CHECK(result == UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF));
        }
        {
            UInt128 result{1, 1};
            CHECK(UInt128::CheckedSubtract(result, UInt128(0, 0xFFFFFFFFFFFFFFFF), UInt128(0xFFFFFFFFFFFFFFFF, 0)));
            CHECK(result == UInt128(1, 0xFFFFFFFFFFFFFFFF));
        }
        {
            UInt128 result{1, 1};
            CHECK_FALSE(UInt128::CheckedSubtract(result, UInt128(0xFFFFFFFFFFFFFFFF, 0), UInt128(0, 0xFFFFFFFFFFFFFFFF)));
            CHECK(result == UInt128(0xFFFFFFFFFFFFFFFE, 1));
        }
        {
            UInt128 result{1, 1};
            CHECK(UInt128::CheckedSubtract(result, UInt128(0, 0), UInt128(0, 1)));
            CHECK(result == UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF));
        }
    }

    SECTION("Checked multiply")
    {
        SECTION("64 bit one")
        {
            {
                UInt128 result{5, 5};
                CHECK_FALSE(UInt128::CheckedMultiply(result, UInt128(0, 0), UInt128(0, 0)));
                CHECK(result == UInt128(0, 0));
            }
            {
                UInt128 result{5, 5};
                CHECK_FALSE(UInt128::CheckedMultiply(result, UInt128(0, 1), UInt128(0, 0)));
                CHECK(result == UInt128(0, 0));
            }
            {
                UInt128 result{5, 5};
                CHECK_FALSE(UInt128::CheckedMultiply(result, UInt128(0, 0), UInt128(0, 1)));
                CHECK(result == UInt128(0, 0));
            }
            {
                UInt128 result{5, 5};
                CHECK_FALSE(UInt128::CheckedMultiply(result, UInt128(0, 1), UInt128(0, 1)));
                CHECK(result == UInt128(0, 1));
            }
        }

        SECTION("64 bit max")
        {
            {
                UInt128 result{5, 5};
                CHECK_FALSE(UInt128::CheckedMultiply(result, UInt128(0, 0xFFFFFFFFFFFFFFFF), UInt128(0, 0)));
                CHECK(result == UInt128(0, 0));
            }
            {
                UInt128 result{5, 5};
                CHECK_FALSE(UInt128::CheckedMultiply(result, UInt128(0, 0), UInt128(0, 0xFFFFFFFFFFFFFFFF)));
                CHECK(result == UInt128(0, 0));
            }
            {
                UInt128 result{5, 5};
                CHECK_FALSE(UInt128::CheckedMultiply(result, UInt128(0, 0xFFFFFFFFFFFFFFFF), UInt128(0, 1)));
                CHECK(result == UInt128(0, 0xFFFFFFFFFFFFFFFF));
            }
            {
                UInt128 result{5, 5};
                CHECK_FALSE(UInt128::CheckedMultiply(result, UInt128(0, 1), UInt128(0, 0xFFFFFFFFFFFFFFFF)));
                CHECK(result == UInt128(0, 0xFFFFFFFFFFFFFFFF));
            }
            {
                UInt128 result{5, 5};
                CHECK_FALSE(UInt128::CheckedMultiply(result, UInt128(0, 0xFFFFFFFFFFFFFFFF), UInt128(0, 0xFFFFFFFFFFFFFFFF)));
                CHECK(result == UInt128(0xfffffffffffffffe, 0x0000000000000001));
            }
        }

        SECTION("128 bit - upper 64 bit")
        {
            {
                UInt128 result{5, 5};
                CHECK_FALSE(UInt128::CheckedMultiply(result, UInt128(0xFFFFFFFFFFFFFFFF, 0), UInt128(0, 0)));
                CHECK(result == UInt128(0, 0));
            }
            {
                UInt128 result{5, 5};
                CHECK_FALSE(UInt128::CheckedMultiply(result, UInt128(0, 0), UInt128(0xFFFFFFFFFFFFFFFF, 0)));
                CHECK(result == UInt128(0, 0));
            }
            {
                UInt128 result{5, 5};
                CHECK_FALSE(UInt128::CheckedMultiply(result, UInt128(0xFFFFFFFFFFFFFFFF, 0), UInt128(0, 1)));
                CHECK(result == UInt128(0xFFFFFFFFFFFFFFFF, 0));
            }
            {
                UInt128 result{5, 5};
                CHECK_FALSE(UInt128::CheckedMultiply(result, UInt128(0, 1), UInt128(0xFFFFFFFFFFFFFFFF, 0)));
                CHECK(result == UInt128(0xFFFFFFFFFFFFFFFF, 0));
            }
            {
                UInt128 result{5, 5};
                CHECK(UInt128::CheckedMultiply(result, UInt128(0xFFFFFFFFFFFFFFFF, 0), UInt128(1, 0)));
                CHECK(result == UInt128(0, 0));
            }
            {
                UInt128 result{5, 5};
                CHECK(UInt128::CheckedMultiply(result, UInt128(1, 0), UInt128(0xFFFFFFFFFFFFFFFF, 0)));
                CHECK(result == UInt128(0, 0));
            }
            {
                UInt128 result{5, 5};
                CHECK(UInt128::CheckedMultiply(result, UInt128(0xFFFFFFFFFFFFFFFF, 0), UInt128(0xFFFFFFFFFFFFFFFF, 0)));
                CHECK(result == UInt128(0, 0));
            }
            {
                UInt128 result{5, 5};
                CHECK(UInt128::CheckedMultiply(result, UInt128(0, 0xFFFFFFFFFFFFFFFF), UInt128(0xFFFFFFFFFFFFFFFF, 0)));
                CHECK(result == UInt128(0x0000000000000001, 0x0000000000000000));
            }
        }

        SECTION("Full 128 bit")
        {
            {
                UInt128 result{5, 5};
                CHECK_FALSE(UInt128::CheckedMultiply(result, UInt128(0, 1), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF)));
                CHECK(result == UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF));
            }
            {
                UInt128 result{5, 5};
                CHECK_FALSE(UInt128::CheckedMultiply(result, UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF), UInt128(0, 1)));
                CHECK(result == UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF));
            }
            {
                UInt128 result{5, 5};
                CHECK(UInt128::CheckedMultiply(result, UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF)));
                CHECK(result == UInt128(0, 1));
            }
        }
    }

    SECTION("Checked division")
    {
        SECTION("64 bit numbers")
        {
            {
                UInt128 q{2, 1};
                UInt128 r{3, 7};

                CHECK_FALSE(UInt128::CheckedDivide(q, r, UInt128(0, 0xFFFFFFFFFFFFFFFF), UInt128(0, 1)));
                CHECK(q == UInt128(0, 0xFFFFFFFFFFFFFFFF));
                CHECK(r == UInt128(0, 0));
            }
            {
                UInt128 q{2, 1};
                UInt128 r{3, 7};

                CHECK_FALSE(UInt128::CheckedDivide(q, r, UInt128(0, 0xFFFFFFFFFFFFFFFF), UInt128(0, 2)));
                CHECK(q == UInt128(0, 0x7FFFFFFFFFFFFFFF));
                CHECK(r == UInt128(0, 1));
            }
            {
                UInt128 q{2, 1};
                UInt128 r{3, 7};

                CHECK_FALSE(UInt128::CheckedDivide(q, r, UInt128(0, 0xFFFFFFFFFFFFFFFF), UInt128(0, 3)));
                CHECK(q == UInt128(0, 0x5555555555555555));
                CHECK(r == UInt128(0, 0));
            }
            {
                UInt128 q{2, 1};
                UInt128 r{3, 7};

                CHECK_FALSE(UInt128::CheckedDivide(q, r, UInt128(0, 0xFFFFFFFFFFFFFFFF), UInt128(0, 4)));
                CHECK(q == UInt128(0, 0x3FFFFFFFFFFFFFFF));
                CHECK(r == UInt128(0, 3));
            }
            {
                UInt128 q{2, 1};
                UInt128 r{3, 7};

                CHECK_FALSE(UInt128::CheckedDivide(q, r, UInt128(0, 0xFFFFFFFFFFFFFFFF), UInt128(0, 0xFFFFFFFFFFFFFFFF)));
                CHECK(q == UInt128(0, 1));
                CHECK(r == UInt128(0, 0));
            }
            {
                UInt128 q{2, 1};
                UInt128 r{3, 7};

                CHECK_FALSE(UInt128::CheckedDivide(q, r, UInt128(0, 1), UInt128(0, 0xFFFFFFFFFFFFFFFF)));
                CHECK(q == UInt128(0, 0));
                CHECK(r == UInt128(0, 1));
            }
        }

        SECTION("high 64 bit numbers")
        {
            {
                UInt128 q{2, 1};
                UInt128 r{3, 7};

                CHECK_FALSE(UInt128::CheckedDivide(q, r, UInt128(0xFFFFFFFFFFFFFFFF, 0), UInt128(1, 0)));
                CHECK(q == UInt128(0, 0xFFFFFFFFFFFFFFFF));
                CHECK(r == UInt128(0, 0));
            }
            {
                UInt128 q{2, 1};
                UInt128 r{3, 7};

                CHECK_FALSE(UInt128::CheckedDivide(q, r, UInt128(0xFFFFFFFFFFFFFFFF, 0), UInt128(2, 0)));
                CHECK(q == UInt128(0x0000000000000000, 0x7fffffffffffffff));
                CHECK(r == UInt128(1, 0));
            }
            {
                UInt128 q{2, 1};
                UInt128 r{3, 7};

                CHECK_FALSE(UInt128::CheckedDivide(q, r, UInt128(0xFFFFFFFFFFFFFFFF, 0), UInt128(3, 0)));
                CHECK(q == UInt128(0x0000000000000000, 0x5555555555555555));
                CHECK(r == UInt128(0, 0));
            }
            {
                UInt128 q{2, 1};
                UInt128 r{3, 7};

                CHECK_FALSE(UInt128::CheckedDivide(q, r, UInt128(0xFFFFFFFFFFFFFFFF, 0), UInt128(4, 0)));
                CHECK(q == UInt128(0x0000000000000000, 0x3fffffffffffffff));
                CHECK(r == UInt128(0x0000000000000003, 0x0000000000000000));
            }
            {
                UInt128 q{2, 1};
                UInt128 r{3, 7};

                CHECK_FALSE(UInt128::CheckedDivide(q, r, UInt128(0xFFFFFFFFFFFFFFFF, 0), UInt128(0xFFFFFFFFFFFFFFFF, 0)));
                CHECK(q == UInt128(0, 1));
                CHECK(r == UInt128(0, 0));
            }
            {
                UInt128 q{2, 1};
                UInt128 r{3, 7};

                CHECK_FALSE(UInt128::CheckedDivide(q, r, UInt128(1, 0), UInt128(0xFFFFFFFFFFFFFFFF, 0)));
                CHECK(q == UInt128(0, 0));
                CHECK(r == UInt128(1, 0));
            }
        }

        SECTION("Full 128 bit numbers")
        {
            {
                UInt128 q{2, 1};
                UInt128 r{3, 7};

                CHECK(UInt128::CheckedDivide(q, r, UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF), UInt128(0, 0)));
                CHECK(q == UInt128(2, 1));
                CHECK(r == UInt128(3, 7));
            }
            {
                UInt128 q{2, 1};
                UInt128 r{3, 7};

                CHECK_FALSE(UInt128::CheckedDivide(q, r, UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF), UInt128(0, 1)));
                CHECK(q == UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF));
                CHECK(r == UInt128(0, 0));
            }
            {
                UInt128 q{2, 1};
                UInt128 r{3, 7};

                CHECK_FALSE(UInt128::CheckedDivide(q, r, UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF), UInt128(0, 2)));
                CHECK(q == UInt128(0x7FFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF));
                CHECK(r == UInt128(0, 1));
            }
            {
                UInt128 q{2, 1};
                UInt128 r{3, 7};

                CHECK_FALSE(UInt128::CheckedDivide(q, r, UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF), UInt128(0, 3)));
                CHECK(q == UInt128(0x5555555555555555, 0x5555555555555555));
                CHECK(r == UInt128(0, 0));
            }
            {
                UInt128 q{2, 1};
                UInt128 r{3, 7};

                CHECK_FALSE(UInt128::CheckedDivide(q, r, UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF), UInt128(0, 4)));
                CHECK(q == UInt128(0x3fffffffffffffff, 0xffffffffffffffff));
                CHECK(r == UInt128(0, 3));
            }
            {
                UInt128 q{2, 1};
                UInt128 r{3, 7};

                CHECK_FALSE(UInt128::CheckedDivide(q, r, UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF), UInt128(1, 0)));
                CHECK(q == UInt128(0, 0xFFFFFFFFFFFFFFFF));
                CHECK(r == UInt128(0, 0xFFFFFFFFFFFFFFFF));
            }
            {
                UInt128 q{2, 1};
                UInt128 r{3, 7};

                CHECK_FALSE(UInt128::CheckedDivide(q, r, UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF), UInt128(2, 0)));
                CHECK(q == UInt128(0, 0x7FFFFFFFFFFFFFFF));
                CHECK(r == UInt128(1, 0xFFFFFFFFFFFFFFFF));
            }
            {
                UInt128 q{2, 1};
                UInt128 r{3, 7};

                CHECK_FALSE(UInt128::CheckedDivide(q, r, UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF), UInt128(3, 0)));
                CHECK(q == UInt128(0, 0x5555555555555555));
                CHECK(r == UInt128(0, 0xFFFFFFFFFFFFFFFF));
            }
            {
                UInt128 q{2, 1};
                UInt128 r{3, 7};

                CHECK_FALSE(UInt128::CheckedDivide(q, r, UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF), UInt128(4, 0)));
                CHECK(q == UInt128(0, 0x3FFFFFFFFFFFFFFF));
                CHECK(r == UInt128(3, 0xFFFFFFFFFFFFFFFF));
            }
            {
                UInt128 q{2, 1};
                UInt128 r{3, 7};

                CHECK_FALSE(UInt128::CheckedDivide(q, r, UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF)));
                CHECK(q == UInt128(0, 1));
                CHECK(r == UInt128(0, 0));
            }
            {
                UInt128 q{2, 1};
                UInt128 r{3, 7};

                CHECK_FALSE(UInt128::CheckedDivide(q, r, UInt128(0, 0), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF)));
                CHECK(q == UInt128(0, 0));
                CHECK(r == UInt128(0, 0));
            }
            {
                UInt128 q{2, 1};
                UInt128 r{3, 7};

                CHECK_FALSE(UInt128::CheckedDivide(q, r, UInt128(0, 1), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF)));
                CHECK(q == UInt128(0, 0));
                CHECK(r == UInt128(0, 1));
            }
            {
                UInt128 q{2, 1};
                UInt128 r{3, 7};

                CHECK_FALSE(UInt128::CheckedDivide(q, r, UInt128(1, 1), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF)));
                CHECK(q == UInt128(0, 0));
                CHECK(r == UInt128(1, 1));
            }
            {
                UInt128 q{2, 1};
                UInt128 r{3, 7};

                CHECK_FALSE(UInt128::CheckedDivide(q, r, UInt128(1, 0), UInt128(0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF)));
                CHECK(q == UInt128(0, 0));
                CHECK(r == UInt128(1, 0));
            }
        }
    }
}

TEST_CASE("Conversion")
{
    using namespace weave::numerics;

    SECTION("ToDouble")
    {
        REQUIRE(std::bit_cast<double>(0x4330000000000000) == 4503599627370496.0);
        REQUIRE(std::bit_cast<double>(0x44B0000000000000) == 75557863725914323419136.0);
        REQUIRE(std::bit_cast<double>(0x4670000000000000) == 20282409603651670423947251286016.0);
        REQUIRE(std::bit_cast<double>(0x47F0000000000000) == 340282366920938463463374607431768211456.0);

        CHECK(UInt128::ToDouble(UInt128(0, 0x1000)) == 4096.0);
        CHECK(UInt128::ToDouble(UInt128(0x1, 0)) == 18446744073709551616.0);
        CHECK(UInt128::ToDouble(UInt128(0x10000, 0)) == 1208925819614629174706176.0);
        CHECK(UInt128::ToDouble(UInt128(0x1000000000000000, 0)) == 21267647932558653966460912964485513216.0);
    }

    SECTION("From Double")
    {
        CHECK(UInt128::FromDouble(4096.0) == UInt128(0, 0x1000));
        CHECK(UInt128::FromDouble(18446744073709551616.0) == UInt128(0x1, 0));
        CHECK(UInt128::FromDouble(1208925819614629174706176.0) == UInt128(0x10000, 0));
        CHECK(UInt128::FromDouble(21267647932558653966460912964485513216.0) == UInt128(0x1000000000000000, 0));
    }
}

TEST_CASE("Bit operations")
{
    using namespace weave::numerics;

    SECTION("Complex values")
    {
        constexpr UInt128 Value{0xF00F0E0D0C0B0A09, 0x0807060504030201};

        SECTION("Shift Left")
        {
            CHECK(UInt128::BitShiftLeft(Value, 0) == UInt128{0xf00f0e0d0c0b0a09, 0x0807060504030201});
            CHECK(UInt128::BitShiftLeft(Value, 1) == UInt128{0xe01e1c1a18161412, 0x100e0c0a08060402});
            CHECK(UInt128::BitShiftLeft(Value, 11) == UInt128{0x7870686058504840, 0x3830282018100800});
            CHECK(UInt128::BitShiftLeft(Value, 17) == UInt128{0x1c1a18161412100e, 0x0c0a080604020000});
            CHECK(UInt128::BitShiftLeft(Value, 31) == UInt128{0x8605850484038302, 0x8201810080000000});
            CHECK(UInt128::BitShiftLeft(Value, 33) == UInt128{0x18161412100e0c0a, 0x0806040200000000});
            CHECK(UInt128::BitShiftLeft(Value, 62) == UInt128{0x4201c1814100c080, 0x4000000000000000});
            CHECK(UInt128::BitShiftLeft(Value, 63) == UInt128{0x8403830282018100, 0x8000000000000000});
            CHECK(UInt128::BitShiftLeft(Value, 64) == UInt128{0x0807060504030201, 0x0000000000000000});
            CHECK(UInt128::BitShiftLeft(Value, 65) == UInt128{0x100e0c0a08060402, 0x0000000000000000});
            CHECK(UInt128::BitShiftLeft(Value, 80) == UInt128{0x0605040302010000, 0x0000000000000000});
            CHECK(UInt128::BitShiftLeft(Value, 121) == UInt128{0x0200000000000000, 0x0000000000000000});
            CHECK(UInt128::BitShiftLeft(Value, 127) == UInt128{0x8000000000000000, 0x0000000000000000});
            CHECK(UInt128::BitShiftLeft(Value, 128) == UInt128{0xf00f0e0d0c0b0a09, 0x0807060504030201});
            CHECK(UInt128::BitShiftLeft(Value, 129) == UInt128{0xe01e1c1a18161412, 0x100e0c0a08060402});
            CHECK(UInt128::BitShiftLeft(Value, 130) == UInt128{0xc03c3834302c2824, 0x201c1814100c0804});
        }

        SECTION("Shift Right Zero Extended")
        {
            CHECK(UInt128::BitShiftRightZeroExtend(Value, 0) == UInt128{0xf00f0e0d0c0b0a09, 0x0807060504030201});
            CHECK(UInt128::BitShiftRightZeroExtend(Value, 1) == UInt128{0x7807870686058504, 0x8403830282018100});
            CHECK(UInt128::BitShiftRightZeroExtend(Value, 11) == UInt128{0x001e01e1c1a18161, 0x412100e0c0a08060});
            CHECK(UInt128::BitShiftRightZeroExtend(Value, 17) == UInt128{0x0000780787068605, 0x8504840383028201});
            CHECK(UInt128::BitShiftRightZeroExtend(Value, 31) == UInt128{0x00000001e01e1c1a, 0x18161412100e0c0a});
            CHECK(UInt128::BitShiftRightZeroExtend(Value, 33) == UInt128{0x0000000078078706, 0x8605850484038302});
            CHECK(UInt128::BitShiftRightZeroExtend(Value, 62) == UInt128{0x0000000000000003, 0xc03c3834302c2824});
            CHECK(UInt128::BitShiftRightZeroExtend(Value, 63) == UInt128{0x0000000000000001, 0xe01e1c1a18161412});
            CHECK(UInt128::BitShiftRightZeroExtend(Value, 64) == UInt128{0x0000000000000000, 0xf00f0e0d0c0b0a09});
            CHECK(UInt128::BitShiftRightZeroExtend(Value, 65) == UInt128{0x0000000000000000, 0x7807870686058504});
            CHECK(UInt128::BitShiftRightZeroExtend(Value, 80) == UInt128{0x0000000000000000, 0x0000f00f0e0d0c0b});
            CHECK(UInt128::BitShiftRightZeroExtend(Value, 121) == UInt128{0x0000000000000000, 0x0000000000000078});
            CHECK(UInt128::BitShiftRightZeroExtend(Value, 127) == UInt128{0x0000000000000000, 0x0000000000000001});
            CHECK(UInt128::BitShiftRightZeroExtend(Value, 128) == UInt128{0xf00f0e0d0c0b0a09, 0x0807060504030201});
            CHECK(UInt128::BitShiftRightZeroExtend(Value, 129) == UInt128{0x7807870686058504, 0x8403830282018100});
            CHECK(UInt128::BitShiftRightZeroExtend(Value, 130) == UInt128{0x3c03c3834302c282, 0x4201c1814100c080});
        }

        SECTION("Shift Right Sign Extended")
        {
            CHECK(UInt128::BitShiftRightSignExtend(Value, 0) == UInt128{0xf00f0e0d0c0b0a09, 0x0807060504030201});
            CHECK(UInt128::BitShiftRightSignExtend(Value, 1) == UInt128{0xf807870686058504, 0x8403830282018100});
            CHECK(UInt128::BitShiftRightSignExtend(Value, 11) == UInt128{0xfffe01e1c1a18161, 0x412100e0c0a08060});
            CHECK(UInt128::BitShiftRightSignExtend(Value, 17) == UInt128{0xfffff80787068605, 0x8504840383028201});
            CHECK(UInt128::BitShiftRightSignExtend(Value, 31) == UInt128{0xffffffffe01e1c1a, 0x18161412100e0c0a});
            CHECK(UInt128::BitShiftRightSignExtend(Value, 33) == UInt128{0xfffffffff8078706, 0x8605850484038302});
            CHECK(UInt128::BitShiftRightSignExtend(Value, 62) == UInt128{0xffffffffffffffff, 0xc03c3834302c2824});
            CHECK(UInt128::BitShiftRightSignExtend(Value, 63) == UInt128{0xffffffffffffffff, 0xe01e1c1a18161412});
            CHECK(UInt128::BitShiftRightSignExtend(Value, 64) == UInt128{0xffffffffffffffff, 0xf00f0e0d0c0b0a09});
            CHECK(UInt128::BitShiftRightSignExtend(Value, 65) == UInt128{0xffffffffffffffff, 0xf807870686058504});
            CHECK(UInt128::BitShiftRightSignExtend(Value, 80) == UInt128{0xffffffffffffffff, 0xfffff00f0e0d0c0b});
            CHECK(UInt128::BitShiftRightSignExtend(Value, 121) == UInt128{0xffffffffffffffff, 0xfffffffffffffff8});
            CHECK(UInt128::BitShiftRightSignExtend(Value, 127) == UInt128{0xffffffffffffffff, 0xffffffffffffffff});
            CHECK(UInt128::BitShiftRightSignExtend(Value, 128) == UInt128{0xf00f0e0d0c0b0a09, 0x0807060504030201});
            CHECK(UInt128::BitShiftRightSignExtend(Value, 129) == UInt128{0xf807870686058504, 0x8403830282018100});
            CHECK(UInt128::BitShiftRightSignExtend(Value, 130) == UInt128{0xfc03c3834302c282, 0x4201c1814100c080});
        }

        SECTION("Rotate Left")
        {
            CHECK(UInt128::BitRotateLeft(Value, 0) == UInt128{0xf00f0e0d0c0b0a09, 0x0807060504030201});
            CHECK(UInt128::BitRotateLeft(Value, 1) == UInt128{0xe01e1c1a18161412, 0x100e0c0a08060403});
            CHECK(UInt128::BitRotateLeft(Value, 11) == UInt128{0x7870686058504840, 0x3830282018100f80});
            CHECK(UInt128::BitRotateLeft(Value, 17) == UInt128{0x1c1a18161412100e, 0x0c0a08060403e01e});
            CHECK(UInt128::BitRotateLeft(Value, 31) == UInt128{0x8605850484038302, 0x82018100f8078706});
            CHECK(UInt128::BitRotateLeft(Value, 33) == UInt128{0x18161412100e0c0a, 0x08060403e01e1c1a});
            CHECK(UInt128::BitRotateLeft(Value, 62) == UInt128{0x4201c1814100c080, 0x7c03c3834302c282});
            CHECK(UInt128::BitRotateLeft(Value, 63) == UInt128{0x8403830282018100, 0xf807870686058504});
            CHECK(UInt128::BitRotateLeft(Value, 64) == UInt128{0x0807060504030201, 0xf00f0e0d0c0b0a09});
            CHECK(UInt128::BitRotateLeft(Value, 65) == UInt128{0x100e0c0a08060403, 0xe01e1c1a18161412});
            CHECK(UInt128::BitRotateLeft(Value, 80) == UInt128{0x060504030201f00f, 0x0e0d0c0b0a090807});
            CHECK(UInt128::BitRotateLeft(Value, 121) == UInt128{0x03e01e1c1a181614, 0x12100e0c0a080604});
            CHECK(UInt128::BitRotateLeft(Value, 127) == UInt128{0xf807870686058504, 0x8403830282018100});
            CHECK(UInt128::BitRotateLeft(Value, 128) == UInt128{0xf00f0e0d0c0b0a09, 0x0807060504030201});
            CHECK(UInt128::BitRotateLeft(Value, 129) == UInt128{0xe01e1c1a18161412, 0x100e0c0a08060403});
            CHECK(UInt128::BitRotateLeft(Value, 130) == UInt128{0xc03c3834302c2824, 0x201c1814100c0807});
        }

        SECTION("Rotate Right")
        {
            CHECK(UInt128::BitRotateRight(Value, 0) == UInt128{0xf00f0e0d0c0b0a09, 0x0807060504030201});
            CHECK(UInt128::BitRotateRight(Value, 1) == UInt128{0xf807870686058504, 0x8403830282018100});
            CHECK(UInt128::BitRotateRight(Value, 11) == UInt128{0x403e01e1c1a18161, 0x412100e0c0a08060});
            CHECK(UInt128::BitRotateRight(Value, 17) == UInt128{0x8100f80787068605, 0x8504840383028201});
            CHECK(UInt128::BitRotateRight(Value, 31) == UInt128{0x08060403e01e1c1a, 0x18161412100e0c0a});
            CHECK(UInt128::BitRotateRight(Value, 33) == UInt128{0x82018100f8078706, 0x8605850484038302});
            CHECK(UInt128::BitRotateRight(Value, 62) == UInt128{0x201c1814100c0807, 0xc03c3834302c2824});
            CHECK(UInt128::BitRotateRight(Value, 63) == UInt128{0x100e0c0a08060403, 0xe01e1c1a18161412});
            CHECK(UInt128::BitRotateRight(Value, 64) == UInt128{0x0807060504030201, 0xf00f0e0d0c0b0a09});
            CHECK(UInt128::BitRotateRight(Value, 65) == UInt128{0x8403830282018100, 0xf807870686058504});
            CHECK(UInt128::BitRotateRight(Value, 80) == UInt128{0x0a09080706050403, 0x0201f00f0e0d0c0b});
            CHECK(UInt128::BitRotateRight(Value, 121) == UInt128{0x0787068605850484, 0x03830282018100f8});
            CHECK(UInt128::BitRotateRight(Value, 127) == UInt128{0xe01e1c1a18161412, 0x100e0c0a08060403});
            CHECK(UInt128::BitRotateRight(Value, 128) == UInt128{0xf00f0e0d0c0b0a09, 0x0807060504030201});
            CHECK(UInt128::BitRotateRight(Value, 129) == UInt128{0xf807870686058504, 0x8403830282018100});
            CHECK(UInt128::BitRotateRight(Value, 130) == UInt128{0x7c03c3834302c282, 0x4201c1814100c080});
        }
    }

    SECTION("Simple values")
    {
        constexpr UInt128 Value{uint64_t{1} << 63, 1};

        SECTION("Shift Left")
        {
            CHECK(UInt128::BitShiftLeft(Value, 0) == UInt128{0x8000000000000000, 0x0000000000000001});
            CHECK(UInt128::BitShiftLeft(Value, 1) == UInt128{0x0000000000000000, 0x0000000000000002});
            CHECK(UInt128::BitShiftLeft(Value, 11) == UInt128{0x0000000000000000, 0x0000000000000800});
            CHECK(UInt128::BitShiftLeft(Value, 17) == UInt128{0x0000000000000000, 0x0000000000020000});
            CHECK(UInt128::BitShiftLeft(Value, 31) == UInt128{0x0000000000000000, 0x0000000080000000});
            CHECK(UInt128::BitShiftLeft(Value, 33) == UInt128{0x0000000000000000, 0x0000000200000000});
            CHECK(UInt128::BitShiftLeft(Value, 62) == UInt128{0x0000000000000000, 0x4000000000000000});
            CHECK(UInt128::BitShiftLeft(Value, 63) == UInt128{0x0000000000000000, 0x8000000000000000});
            CHECK(UInt128::BitShiftLeft(Value, 64) == UInt128{0x0000000000000001, 0x0000000000000000});
            CHECK(UInt128::BitShiftLeft(Value, 65) == UInt128{0x0000000000000002, 0x0000000000000000});
            CHECK(UInt128::BitShiftLeft(Value, 80) == UInt128{0x0000000000010000, 0x0000000000000000});
            CHECK(UInt128::BitShiftLeft(Value, 121) == UInt128{0x0200000000000000, 0x0000000000000000});
            CHECK(UInt128::BitShiftLeft(Value, 127) == UInt128{0x8000000000000000, 0x0000000000000000});
            CHECK(UInt128::BitShiftLeft(Value, 128) == UInt128{0x8000000000000000, 0x0000000000000001});
            CHECK(UInt128::BitShiftLeft(Value, 129) == UInt128{0x0000000000000000, 0x0000000000000002});
            CHECK(UInt128::BitShiftLeft(Value, 130) == UInt128{0x0000000000000000, 0x0000000000000004});
        }

        SECTION("Shift Right Zero Extended")
        {
            CHECK(UInt128::BitShiftRightZeroExtend(Value, 0) == UInt128{0x8000000000000000, 0x0000000000000001});
            CHECK(UInt128::BitShiftRightZeroExtend(Value, 1) == UInt128{0x4000000000000000, 0x0000000000000000});
            CHECK(UInt128::BitShiftRightZeroExtend(Value, 11) == UInt128{0x0010000000000000, 0x0000000000000000});
            CHECK(UInt128::BitShiftRightZeroExtend(Value, 17) == UInt128{0x0000400000000000, 0x0000000000000000});
            CHECK(UInt128::BitShiftRightZeroExtend(Value, 31) == UInt128{0x0000000100000000, 0x0000000000000000});
            CHECK(UInt128::BitShiftRightZeroExtend(Value, 33) == UInt128{0x0000000040000000, 0x0000000000000000});
            CHECK(UInt128::BitShiftRightZeroExtend(Value, 62) == UInt128{0x0000000000000002, 0x0000000000000000});
            CHECK(UInt128::BitShiftRightZeroExtend(Value, 63) == UInt128{0x0000000000000001, 0x0000000000000000});
            CHECK(UInt128::BitShiftRightZeroExtend(Value, 64) == UInt128{0x0000000000000000, 0x8000000000000000});
            CHECK(UInt128::BitShiftRightZeroExtend(Value, 65) == UInt128{0x0000000000000000, 0x4000000000000000});
            CHECK(UInt128::BitShiftRightZeroExtend(Value, 80) == UInt128{0x0000000000000000, 0x0000800000000000});
            CHECK(UInt128::BitShiftRightZeroExtend(Value, 121) == UInt128{0x0000000000000000, 0x0000000000000040});
            CHECK(UInt128::BitShiftRightZeroExtend(Value, 127) == UInt128{0x0000000000000000, 0x0000000000000001});
            CHECK(UInt128::BitShiftRightZeroExtend(Value, 128) == UInt128{0x8000000000000000, 0x0000000000000001});
            CHECK(UInt128::BitShiftRightZeroExtend(Value, 129) == UInt128{0x4000000000000000, 0x0000000000000000});
            CHECK(UInt128::BitShiftRightZeroExtend(Value, 130) == UInt128{0x2000000000000000, 0x0000000000000000});
        }

        SECTION("Shift Right Sign Extended")
        {
            CHECK(UInt128::BitShiftRightSignExtend(Value, 0) == UInt128{0x8000000000000000, 0x0000000000000001});
            CHECK(UInt128::BitShiftRightSignExtend(Value, 1) == UInt128{0xC000000000000000, 0x0000000000000000});
            CHECK(UInt128::BitShiftRightSignExtend(Value, 11) == UInt128{0xfff0000000000000, 0x0000000000000000});
            CHECK(UInt128::BitShiftRightSignExtend(Value, 17) == UInt128{0xffffc00000000000, 0x0000000000000000});
            CHECK(UInt128::BitShiftRightSignExtend(Value, 31) == UInt128{0xffffffff00000000, 0x0000000000000000});
            CHECK(UInt128::BitShiftRightSignExtend(Value, 33) == UInt128{0xffffffffc0000000, 0x0000000000000000});
            CHECK(UInt128::BitShiftRightSignExtend(Value, 62) == UInt128{0xfffffffffffffffe, 0x0000000000000000});
            CHECK(UInt128::BitShiftRightSignExtend(Value, 63) == UInt128{0xffffffffffffffff, 0x0000000000000000});
            CHECK(UInt128::BitShiftRightSignExtend(Value, 64) == UInt128{0xffffffffffffffff, 0x8000000000000000});
            CHECK(UInt128::BitShiftRightSignExtend(Value, 65) == UInt128{0xffffffffffffffff, 0xc000000000000000});
            CHECK(UInt128::BitShiftRightSignExtend(Value, 80) == UInt128{0xffffffffffffffff, 0xffff800000000000});
            CHECK(UInt128::BitShiftRightSignExtend(Value, 121) == UInt128{0xffffffffffffffff, 0xffffffffffffffc0});
            CHECK(UInt128::BitShiftRightSignExtend(Value, 127) == UInt128{0xffffffffffffffff, 0xffffffffffffffff});
            CHECK(UInt128::BitShiftRightSignExtend(Value, 128) == UInt128{0x8000000000000000, 0x0000000000000001});
            CHECK(UInt128::BitShiftRightSignExtend(Value, 129) == UInt128{0xc000000000000000, 0x0000000000000000});
            CHECK(UInt128::BitShiftRightSignExtend(Value, 130) == UInt128{0xe000000000000000, 0x0000000000000000});
        }

        SECTION("Rotate Left")
        {
            CHECK(UInt128::BitRotateLeft(Value, 0) == UInt128{0x8000000000000000, 0x0000000000000001});
            CHECK(UInt128::BitRotateLeft(Value, 1) == UInt128{0x0000000000000000, 0x0000000000000003});
            CHECK(UInt128::BitRotateLeft(Value, 11) == UInt128{0x0000000000000000, 0x0000000000000c00});
            CHECK(UInt128::BitRotateLeft(Value, 17) == UInt128{0x0000000000000000, 0x0000000000030000});
            CHECK(UInt128::BitRotateLeft(Value, 31) == UInt128{0x0000000000000000, 0x00000000c0000000});
            CHECK(UInt128::BitRotateLeft(Value, 33) == UInt128{0x0000000000000000, 0x0000000300000000});
            CHECK(UInt128::BitRotateLeft(Value, 62) == UInt128{0x0000000000000000, 0x6000000000000000});
            CHECK(UInt128::BitRotateLeft(Value, 63) == UInt128{0x0000000000000000, 0xc000000000000000});
            CHECK(UInt128::BitRotateLeft(Value, 64) == UInt128{0x0000000000000001, 0x8000000000000000});
            CHECK(UInt128::BitRotateLeft(Value, 65) == UInt128{0x0000000000000003, 0x0000000000000000});
            CHECK(UInt128::BitRotateLeft(Value, 80) == UInt128{0x0000000000018000, 0x0000000000000000});
            CHECK(UInt128::BitRotateLeft(Value, 121) == UInt128{0x0300000000000000, 0x0000000000000000});
            CHECK(UInt128::BitRotateLeft(Value, 127) == UInt128{0xc000000000000000, 0x0000000000000000});
            CHECK(UInt128::BitRotateLeft(Value, 128) == UInt128{0x8000000000000000, 0x0000000000000001});
            CHECK(UInt128::BitRotateLeft(Value, 129) == UInt128{0x0000000000000000, 0x0000000000000003});
            CHECK(UInt128::BitRotateLeft(Value, 130) == UInt128{0x0000000000000000, 0x0000000000000006});
        }

        SECTION("Rotate Right")
        {
            CHECK(UInt128::BitRotateRight(Value, 0) == UInt128{0x8000000000000000, 0x0000000000000001});
            CHECK(UInt128::BitRotateRight(Value, 1) == UInt128{0xc000000000000000, 0x0000000000000000});
            CHECK(UInt128::BitRotateRight(Value, 11) == UInt128{0x0030000000000000, 0x0000000000000000});
            CHECK(UInt128::BitRotateRight(Value, 17) == UInt128{0x0000c00000000000, 0x0000000000000000});
            CHECK(UInt128::BitRotateRight(Value, 31) == UInt128{0x0000000300000000, 0x0000000000000000});
            CHECK(UInt128::BitRotateRight(Value, 33) == UInt128{0x00000000c0000000, 0x0000000000000000});
            CHECK(UInt128::BitRotateRight(Value, 62) == UInt128{0x0000000000000006, 0x0000000000000000});
            CHECK(UInt128::BitRotateRight(Value, 63) == UInt128{0x0000000000000003, 0x0000000000000000});
            CHECK(UInt128::BitRotateRight(Value, 64) == UInt128{0x0000000000000001, 0x8000000000000000});
            CHECK(UInt128::BitRotateRight(Value, 65) == UInt128{0x0000000000000000, 0xc000000000000000});
            CHECK(UInt128::BitRotateRight(Value, 80) == UInt128{0x0000000000000000, 0x0001800000000000});
            CHECK(UInt128::BitRotateRight(Value, 121) == UInt128{0x0000000000000000, 0x00000000000000c0});
            CHECK(UInt128::BitRotateRight(Value, 127) == UInt128{0x0000000000000000, 0x0000000000000003});
            CHECK(UInt128::BitRotateRight(Value, 128) == UInt128{0x8000000000000000, 0x0000000000000001});
            CHECK(UInt128::BitRotateRight(Value, 129) == UInt128{0xc000000000000000, 0x0000000000000000});
            CHECK(UInt128::BitRotateRight(Value, 130) == UInt128{0x6000000000000000, 0x0000000000000000});
        }
    }

    SECTION("Byte swap")
    {
        CHECK(UInt128::ByteSwap(UInt128{0xFFEEDDCCBBAA9988, 0x7766554433221100}) == UInt128{0x0011223344556677, 0x8899AABBCCDDEEFF});
    }
}

TEST_CASE("UInt128 - TryParse and ToString")
{
    using namespace weave::numerics;

    {
        CHECK(UInt128::ToString(UInt128{0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF}) == "340282366920938463463374607431768211455");

        UInt128 result{};
        CHECK(UInt128::TryParse(result, "340282366920938463463374607431768211455", 10));
        CHECK(result == UInt128{0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF});
    }
    {
        UInt128 result{};
        CHECK(UInt128::TryParse(result, "FEDCBA98765432100123456789ABCDEF", 16));
        CHECK(result == UInt128{0xFEDCBA9876543210, 0x0123456789ABCDEF});
    }
    {
        CHECK(UInt128::ToStringHex(UInt128{0xFEDCBA9876543210, 0x0123456789ABCDEF}) == "FEDCBA98765432100123456789ABCDEF");

        UInt128 result{};
        CHECK(UInt128::TryParse(result, "FEDCBA98765432100123456789ABCDEF", 16));
        CHECK(result == UInt128{0xFEDCBA9876543210, 0x0123456789ABCDEF});
    }
    {
        CHECK(UInt128::ToStringHex(UInt128{0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF}) == "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF");

        UInt128 result{};
        CHECK(UInt128::TryParse(result, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", 16));
        CHECK(result == UInt128{0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF});
    }
    {
        CHECK(UInt128::ToStringHex(UInt128{0x0123456789ABCDEF, 0xFEDCBA9876543210}) == "123456789ABCDEFFEDCBA9876543210");
    }
}

TEST_CASE("UInt128 - Factorial")
{
    using namespace weave::numerics;

    UInt128 result{0, 1};
    UInt128 i{0, 1};
    UInt128 const one{0, 1};

    CHECK_FALSE(UInt128::CheckedMultiply(result, result, i));
    CHECK_FALSE(UInt128::CheckedAdd(i, i, one));
    CHECK(result == UInt128::Parse("1"));

    CHECK_FALSE(UInt128::CheckedMultiply(result, result, i));
    CHECK_FALSE(UInt128::CheckedAdd(i, i, one));
    CHECK(result == UInt128::Parse("2"));

    CHECK_FALSE(UInt128::CheckedMultiply(result, result, i));
    CHECK_FALSE(UInt128::CheckedAdd(i, i, one));
    CHECK(result == UInt128::Parse("6"));

    CHECK_FALSE(UInt128::CheckedMultiply(result, result, i));
    CHECK_FALSE(UInt128::CheckedAdd(i, i, one));
    CHECK(result == UInt128::Parse("24"));

    CHECK_FALSE(UInt128::CheckedMultiply(result, result, i));
    CHECK_FALSE(UInt128::CheckedAdd(i, i, one));
    CHECK(result == UInt128::Parse("120"));

    CHECK_FALSE(UInt128::CheckedMultiply(result, result, i));
    CHECK_FALSE(UInt128::CheckedAdd(i, i, one));
    CHECK(result == UInt128::Parse("720"));

    CHECK_FALSE(UInt128::CheckedMultiply(result, result, i));
    CHECK_FALSE(UInt128::CheckedAdd(i, i, one));
    CHECK(result == UInt128::Parse("5040"));

    CHECK_FALSE(UInt128::CheckedMultiply(result, result, i));
    CHECK_FALSE(UInt128::CheckedAdd(i, i, one));
    CHECK(result == UInt128::Parse("40320"));

    CHECK_FALSE(UInt128::CheckedMultiply(result, result, i));
    CHECK_FALSE(UInt128::CheckedAdd(i, i, one));
    CHECK(result == UInt128::Parse("362880"));

    CHECK_FALSE(UInt128::CheckedMultiply(result, result, i));
    CHECK_FALSE(UInt128::CheckedAdd(i, i, one));
    CHECK(result == UInt128::Parse("3628800"));

    CHECK_FALSE(UInt128::CheckedMultiply(result, result, i));
    CHECK_FALSE(UInt128::CheckedAdd(i, i, one));
    CHECK(result == UInt128::Parse("39916800"));

    CHECK_FALSE(UInt128::CheckedMultiply(result, result, i));
    CHECK_FALSE(UInt128::CheckedAdd(i, i, one));
    CHECK(result == UInt128::Parse("479001600"));

    CHECK_FALSE(UInt128::CheckedMultiply(result, result, i));
    CHECK_FALSE(UInt128::CheckedAdd(i, i, one));
    CHECK(result == UInt128::Parse("6227020800"));

    CHECK_FALSE(UInt128::CheckedMultiply(result, result, i));
    CHECK_FALSE(UInt128::CheckedAdd(i, i, one));
    CHECK(result == UInt128::Parse("87178291200"));

    CHECK_FALSE(UInt128::CheckedMultiply(result, result, i));
    CHECK_FALSE(UInt128::CheckedAdd(i, i, one));
    CHECK(result == UInt128::Parse("1307674368000"));

    CHECK_FALSE(UInt128::CheckedMultiply(result, result, i));
    CHECK_FALSE(UInt128::CheckedAdd(i, i, one));
    CHECK(result == UInt128::Parse("20922789888000"));

    CHECK_FALSE(UInt128::CheckedMultiply(result, result, i));
    CHECK_FALSE(UInt128::CheckedAdd(i, i, one));
    CHECK(result == UInt128::Parse("355687428096000"));

    CHECK_FALSE(UInt128::CheckedMultiply(result, result, i));
    CHECK_FALSE(UInt128::CheckedAdd(i, i, one));
    CHECK(result == UInt128::Parse("6402373705728000"));

    CHECK_FALSE(UInt128::CheckedMultiply(result, result, i));
    CHECK_FALSE(UInt128::CheckedAdd(i, i, one));
    CHECK(result == UInt128::Parse("121645100408832000"));

    CHECK_FALSE(UInt128::CheckedMultiply(result, result, i));
    CHECK_FALSE(UInt128::CheckedAdd(i, i, one));
    CHECK(result == UInt128::Parse("2432902008176640000"));

    CHECK_FALSE(UInt128::CheckedMultiply(result, result, i));
    CHECK_FALSE(UInt128::CheckedAdd(i, i, one));
    CHECK(result == UInt128::Parse("51090942171709440000"));

    CHECK_FALSE(UInt128::CheckedMultiply(result, result, i));
    CHECK_FALSE(UInt128::CheckedAdd(i, i, one));
    CHECK(result == UInt128::Parse("1124000727777607680000"));

    CHECK_FALSE(UInt128::CheckedMultiply(result, result, i));
    CHECK_FALSE(UInt128::CheckedAdd(i, i, one));
    CHECK(result == UInt128::Parse("25852016738884976640000"));

    CHECK_FALSE(UInt128::CheckedMultiply(result, result, i));
    CHECK_FALSE(UInt128::CheckedAdd(i, i, one));
    CHECK(result == UInt128::Parse("620448401733239439360000"));

    CHECK_FALSE(UInt128::CheckedMultiply(result, result, i));
    CHECK_FALSE(UInt128::CheckedAdd(i, i, one));
    CHECK(result == UInt128::Parse("15511210043330985984000000"));

    CHECK_FALSE(UInt128::CheckedMultiply(result, result, i));
    CHECK_FALSE(UInt128::CheckedAdd(i, i, one));
    CHECK(result == UInt128::Parse("403291461126605635584000000"));

    CHECK_FALSE(UInt128::CheckedMultiply(result, result, i));
    CHECK_FALSE(UInt128::CheckedAdd(i, i, one));
    CHECK(result == UInt128::Parse("10888869450418352160768000000"));

    CHECK_FALSE(UInt128::CheckedMultiply(result, result, i));
    CHECK_FALSE(UInt128::CheckedAdd(i, i, one));
    CHECK(result == UInt128::Parse("304888344611713860501504000000"));

    CHECK_FALSE(UInt128::CheckedMultiply(result, result, i));
    CHECK_FALSE(UInt128::CheckedAdd(i, i, one));
    CHECK(result == UInt128::Parse("8841761993739701954543616000000"));

    CHECK_FALSE(UInt128::CheckedMultiply(result, result, i));
    CHECK_FALSE(UInt128::CheckedAdd(i, i, one));
    CHECK(result == UInt128::Parse("265252859812191058636308480000000"));

    CHECK_FALSE(UInt128::CheckedMultiply(result, result, i));
    CHECK_FALSE(UInt128::CheckedAdd(i, i, one));
    CHECK(result == UInt128::Parse("8222838654177922817725562880000000"));

    CHECK_FALSE(UInt128::CheckedMultiply(result, result, i));
    CHECK_FALSE(UInt128::CheckedAdd(i, i, one));
    CHECK(result == UInt128::Parse("263130836933693530167218012160000000"));

    CHECK_FALSE(UInt128::CheckedMultiply(result, result, i));
    CHECK_FALSE(UInt128::CheckedAdd(i, i, one));
    CHECK(result == UInt128::Parse("8683317618811886495518194401280000000"));

    CHECK_FALSE(UInt128::CheckedMultiply(result, result, i));
    CHECK_FALSE(UInt128::CheckedAdd(i, i, one));
    CHECK(result == UInt128::Parse("295232799039604140847618609643520000000"));

    UInt128 lower = result;

    CHECK(UInt128::CheckedMultiply(result, result, i));
    // Overflowed; result contains lower part of multiplication
    CHECK(result == UInt128{0x5dcbe8a8bc8b95cf, 0x58cde17100000000});

    // Verify using big multiplication.
    UInt128 upper = UInt128::MultiplyHigh(lower, i, lower);
    CHECK(result == UInt128{0x5dcbe8a8bc8b95cf, 0x58cde17100000000});
    CHECK(upper == UInt128{0x0000000000000000, 0x000000000000001e});
}
